4.	Frontend vs Backend Validation Parity Tests
Goal: Detect divergence early.
Tasks: Import backend JSON fixtures (or reproduce), assert frontend validateDefinition errors ⊆ backend publish validation errors.
Acceptance: Parity test suite passes; failures documented path to remediation.
5.	workflowService Unit Tests
Goal: Stabilize status normalization & error handling.
Tasks: Tests for numeric/string status normalization, validateThenPublish short‑circuit, publish error shape parsing, task status mapping, snapshot retrieval.
Acceptance: 85%+ coverage for workflow.service.ts; all edge error scenarios asserted.
6.	Extract & Test Builder Pure Logic
Goal: Reduce UI coupling.
Refactor: Move applyGatewayBranchMetadata, extractBranch, ensureLatestSaved, dirty tracking into /features/workflow/lib.
Tests: Unit tests for each; race / no-change optimization.
Acceptance: BuilderPage shrinks (no logic duplication), library tests passing.
7.	Workflow Builder Interaction Tests
Goal: Validate primary authoring flows.
Scenarios: Add nodes → connect edges → gateway true/false labeling → save → publish blocked on validation → fix errors → publish success. Include timer node creation.
Acceptance: Scenario test passes without network (MSW only), deterministic edge labels.
8.	Operations Pages Tests (Definitions / My Tasks / Instance Details)
Goal: Guard core runtime UX.
Tasks: Definitions load + publish button state rules; MyTasks claim→complete transitions; InstanceDetails current nodes highlight & events ordering (mock).
Acceptance: Each page has at least one happy path + one permission-restricted test.
9.	Permissions & RBAC UI Enforcement Tests
Goal: Prevent accidental exposure.
Tasks: Mock different user permission sets; assert hidden/disabled actions (publish, start instance, claim task).
Acceptance: Matrix documented; tests assert absence (queryBy*) and presence where allowed.
10.	Definition Immutability Frontend Guard Tests
Goal: Enforce no edits post-publish (UI & service).
Tasks: Attempt update after publish → blocked; attempt new version (if supported) → allowed.
Acceptance: Tests reflect expected disabled inputs / API calls not issued.
11.	Multi-Tenant Isolation UI Tests
Goal: Prevent cross-tenant bleed.
Tasks: Switch tenant mock → definitions/tasks lists refresh; ensure no cached leakage (distinct IDs).
Acceptance: Cache invalidation verified via query key isolation.
12.	Timer & Auto-Advance UX Tests (After TimerWorker)
Goal: Visual accuracy for due timers.
Tasks: Mock timer task becoming complete after “tick” (MSW state mutation); verify UI refresh & badge counts update.
Acceptance: Poll or refetch triggers new state; no manual page reload needed.
13.	Outbox / Event Stream Surface Tests (After Dispatcher)
Goal: Basic visibility of event progression.
Tasks: Mock events growth; assert timeline incremental render, idempotency not duplicated.
Acceptance: Event ordering stable; duplicate suppression test passes.
14.	UoW Save Batching Frontend Expectations
Goal: Ensure no accidental extra API calls per action.
Tasks: Spy on MSW handlers; claim/complete/start flows trigger exactly one POST each.
Acceptance: Test counters asserted.
16.	Coverage Gates & CI Enhancements
Goal: Enforce quality floor.
Tasks: Raise thresholds (e.g., 80% global, 85% workflow folder); add per-folder diff coverage report; fail build on uncovered new lines > N.
Acceptance: CI pipeline enforces gates; documented override process.
17.	Performance & Flake Hardening
Goal: Stable, fast CI.
Tasks: Reduce unnecessary jsdom renders, use test.each where possible, eliminate await sleep patterns, mock crypto/random where deterministic.
Acceptance: Median test runtime reduced; zero flaky reruns over 3 consecutive runs.
18.	Developer Docs & Test Contribution Guide
Goal: Lower onboarding cost.
Tasks: Add TESTING.md (patterns, fixtures, mocking strategy, naming conventions).
Acceptance: Doc merged; referenced in root README.
19.	Optional: Visual Regression Placeholder (Future)
Goal: Prepare for screenshot-based diff later.
Task: Abstract critical component markup with stable data-testid strategy.
Acceptance: Key workflow components have deterministic testids.
20.	Optional: Mutation Testing Spike
Goal: Validate test rigor (esp. DSL & service).
Task: Run Stryker (or similar) on DSL + service modules; record mutation score baseline.
Acceptance: Baseline report stored; actionable mutants listed.
Dependency / Ordering Notes
•	Items 1–5 unblock the rest.
•	Items 6–8 rely on extracted helpers & MSW handlers.
•	Timer (12) / Outbox (13) wait for backend features.
•	Architecture refactor (15) happens after breadth of tests added to avoid constant file moves during creation.
Sizing (Rough T-Shirt)
1–5: S / S / M / S / M
6–8: M / M / M
9–12: S / S / M / S
13–14: M / S
15–16: M / S
17–18: S / S
19–20: (Future)
Definition of Done (Global)
•	Tests deterministic (no random failing across 3 runs).
•	No console.error leakage (unless intentionally asserted).
•	New helpers documented.
•	Coverage target met or consciously waived with comment.
