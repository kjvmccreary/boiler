PS C:\Users\mccre\dev\boiler\src\frontend\react-app> npm run test:workflow:all

> microservices-frontend@0.0.0 test:workflow:all
> vitest run src/features/workflow/tests --config vitest.config.js


 RUN  v1.6.1 C:/Users/mccre/dev/boiler/src/frontend/react-app

stdout | src/features/workflow/tests/dsl/dsl.core.test.ts > DSL serialize/deserialize core > deduplicates true/false branch edges per source keeping first occurrences
[DSL][serialize] edges [
  { id: 'e1', from: 'g1', to: 'a', label: 'true', fromHandle: 'true' },
  {
    id: 'e3',
    from: 'g1',
    to: 'c',
    label: 'false',
    fromHandle: 'false'
  },
  {
    id: 'e5',
    from: 'g1',
    to: 'd',
    label: 'else',
    fromHandle: undefined
  }
]

stdout | src/features/workflow/tests/dsl/dsl.core.test.ts > DSL serialize/deserialize core > round-trips nodes & edges (excluding deduped duplicates)
[DSL][serialize] edges [
  {
    id: 's_to_t',
    from: 'start',
    to: 't1',
    label: undefined,
    fromHandle: undefined
  },
  {
    id: 't_to_g',
    from: 't1',
    to: 'g1',
    label: undefined,
    fromHandle: undefined
  },
  {
    id: 'g_true',
    from: 'g1',
    to: 'h1',
    label: 'true',
    fromHandle: 'true'
  },
  {
    id: 'g_false',
    from: 'g1',
    to: 'end',
    label: 'false',
    fromHandle: 'false'
  }
]
[DSL][deserialize] edges [
  { id: 's_to_t', sourceHandle: undefined, label: undefined },
  { id: 't_to_g', sourceHandle: undefined, label: undefined },
  { id: 'g_true', sourceHandle: 'true', label: 'true' },
  { id: 'g_false', sourceHandle: 'false', label: 'false' }
]

stdout | src/features/workflow/tests/dsl/dsl.core.test.ts > DSL serialize/deserialize core > preserves arbitrary non-branch edge labels
[DSL][serialize] edges [
  {
    id: 'e1',
    from: 'n1',
    to: 'n2',
    label: 'INIT',
    fromHandle: undefined
  },
  {
    id: 'e2',
    from: 'n2',
    to: 'n3',
    label: 'FINALIZE',
    fromHandle: undefined
  }
]

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:18:13)
🔍 API CLIENT: Creating axios instance with baseURL: empty (using Vite proxy)

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:19:13)
🔍 API CLIENT: Expected proxy config:

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:20:13)
  - /api/auth/* → AuthService (port 7001)

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:21:13)
  - /api/* → UserService (port 7002)

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:18:13)
🔍 API CLIENT: Creating axios instance with baseURL: empty (using Vite proxy)

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:19:13)
🔍 API CLIENT: Expected proxy config:

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:20:13)
  - /api/auth/* → AuthService (port 7001)

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:21:13)
  - /api/* → UserService (port 7002)

stderr | src/features/workflow/tests/service/workflowService.status-normalization.test.ts > WorkflowService status + error normalization > normalizes numeric task statuses in list
[MSW] Found a redundant usage of query parameters in the request handler URL for "GET /api/workflow/tasks?mine=true". Please match against a path instead and access query parameters using "new URL(request.url).searchParams" instead. Learn more: https://mswjs.io/docs/http/intercepting-requests#querysearch-parameters

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:18:13)
🔍 API CLIENT: Creating axios instance with baseURL: empty (using Vite proxy)

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:19:13)
🔍 API CLIENT: Expected proxy config:

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:20:13)
  - /api/auth/* → AuthService (port 7001)

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:21:13)
  - /api/* → UserService (port 7002)

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:18:13)
🔍 API CLIENT: Creating axios instance with baseURL: empty (using Vite proxy)

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:19:13)
🔍 API CLIENT: Expected proxy config:

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:20:13)
  - /api/auth/* → AuthService (port 7001)

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:21:13)
  - /api/* → UserService (port 7002)

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:18:13)
🔍 API CLIENT: Creating axios instance with baseURL: empty (using Vite proxy)

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:19:13)
🔍 API CLIENT: Expected proxy config:

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:20:13)
  - /api/auth/* → AuthService (port 7001)

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:21:13)
  - /api/* → UserService (port 7002)

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:18:13)
🔍 API CLIENT: Creating axios instance with baseURL: empty (using Vite proxy)

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:19:13)
🔍 API CLIENT: Expected proxy config:

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:20:13)
  - /api/auth/* → AuthService (port 7001)

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:21:13)
  - /api/* → UserService (port 7002)

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:18:13)
🔍 API CLIENT: Creating axios instance with baseURL: empty (using Vite proxy)

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:19:13)
🔍 API CLIENT: Expected proxy config:

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:20:13)
  - /api/auth/* → AuthService (port 7001)

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:21:13)
  - /api/* → UserService (port 7002)

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:18:13)
🔍 API CLIENT: Creating axios instance with baseURL: empty (using Vite proxy)

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:19:13)
🔍 API CLIENT: Expected proxy config:

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:20:13)
  - /api/auth/* → AuthService (port 7001)

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:21:13)
  - /api/* → UserService (port 7002)

stdout | src/features/workflow/tests/builder/builder.serialization.test.ts > Builder Serialization (placeholder) > round-trips basic approval fixture
[DSL][serialize] edges [
  {
    id: 'e1',
    from: 'n1',
    to: 'n2',
    label: undefined,
    fromHandle: undefined
  },
  {
    id: 'e2',
    from: 'n2',
    to: 'n3',
    label: undefined,
    fromHandle: undefined
  },
  { id: 'e3', from: 'n3', to: 'n4', label: 'true', fromHandle: 'true' },
  {
    id: 'e4',
    from: 'n3',
    to: 'n5',
    label: 'false',
    fromHandle: 'false'
  }
]
[DSL][deserialize] edges [
  { id: 'e1', sourceHandle: undefined, label: undefined },
  { id: 'e2', sourceHandle: undefined, label: undefined },
  { id: 'e3', sourceHandle: 'true', label: 'true' },
  { id: 'e4', sourceHandle: 'false', label: 'false' }
]

 ✓ |frontend| src/features/workflow/tests/dsl/dsl.core.test.ts (13)
   ✓ DSL serialize/deserialize core (3)
     ✓ deduplicates true/false branch edges per source keeping first occurrences
     ✓ round-trips nodes & edges (excluding deduped duplicates)
     ✓ preserves arbitrary non-branch edge labels
   ✓ DSL validateDefinition invalid fixtures (6)
     ✓ flags multiple start nodes
     ✓ flags missing end node
     ✓ flags unreachable nodes
     ✓ flags edge referencing unknown node
     ✓ flags duplicate node IDs
     ✓ flags gateway without condition
   ✓ DSL validateNode (4)
     ✓ accepts timer with delaySeconds only
     ✓ errors on timer with no delayMinutes, delaySeconds, or untilIso
     ✓ errors on gateway without condition
     ✓ warns on humanTask without assignee roles
 ✓ |frontend| src/features/workflow/tests/service/workflowService.batching.test.ts (1)
   ✓ WorkflowService / API call batching (single network per action) (1)
     ✓ claim + complete each perform exactly one POST to their endpoints
 ✓ |frontend| src/features/workflow/tests/service/workflowService.status-normalization.test.ts (6)
   ✓ WorkflowService status + error normalization (6)
     ✓ normalizes numeric instance status to enum
     ✓ normalizes numeric task statuses in list
     ✓ validateThenPublish short-circuits when validation fails
     ✓ publishDefinition surfaces server error messages (array)
     ✓ publishDefinition handles single string error shape
     ✓ validateDefinitionJson returns success false on server 422 with errors
 ✓ |frontend| src/features/workflow/tests/service/workflowService.multi-tenant.test.ts (1)
   ✓ WorkflowService / Multi-Tenant Isolation (1)
     ✓ isolates definitions and tasks between tenants
 ✓ |frontend| src/features/workflow/tests/service/workflowService.definitions.test.ts (4)
   ✓ WorkflowService / Definitions (4)
     ✓ creates a draft definition
     ✓ publishes a draft after validation passes
     ✓ returns validation failure (simulated server invalid)
     ✓ publishDefinition surfaces error messages
 ✓ |frontend| src/features/workflow/tests/dsl/dsl.validation-parity.test.ts (4)
   ✓ Validation Parity (frontend vs backend) (4)
     ✓ frontend error set is subset of backend error set: multi-start
     ✓ frontend error set is subset of backend error set: unreachable
     ✓ frontend error set is subset of backend error set: missing-end
     ✓ frontend error set is subset of backend error set: gateway-no-condition
 ✓ |frontend| src/features/workflow/tests/service/workflowService.instances-tasks.test.ts (3)
   ✓ WorkflowService / Instances & Tasks (3)
     ✓ creates & publishes definition, then starts instance
     ✓ lists tasks (mine filter)
     ✓ gracefully handles validateDefinitionJson (happy path)
 ✓ |frontend| src/features/workflow/tests/integration-lite/approval.happy-path.test.ts (1)
   ✓ Workflow Integration-Lite / Approval Happy Path (1)
     ✓ draft → publish → start → task summary
 ✓ |frontend| src/features/workflow/tests/integration-lite/approval.claim-complete.test.ts (1)
   ✓ Integration-Lite / Claim & Complete Flow (1)
     ✓ draft → publish → start → claim → complete task
 ✓ |frontend| src/features/workflow/tests/service/workflowService.immutability.test.ts (1)
   ✓ WorkflowService / Definition Immutability (1)
     ✓ blocks update after publish
 ↓ |frontend| src/features/workflow/tests/operations/definitions.operations.test.tsx (1) [skipped]
   ↓ Operations / DefinitionsPage (SKIPPED) (1) [skipped]
     ↓ placeholder – restore real tests after AppTestWrapper is implemented [skipped]
 ✓ |frontend| src/features/workflow/tests/builder/builder.serialization.test.ts (1)
   ✓ Builder Serialization (placeholder) (1)
     ✓ round-trips basic approval fixture
 ↓ |frontend| src/features/workflow/tests/operations/tasks.operations.test.tsx (1) [skipped]
   ↓ Operations / MyTasksPage (SKIPPED) (1) [skipped]
     ↓ placeholder – restore real tests after AppTestWrapper is implemented [skipped]
 ↓ |frontend| src/features/workflow/tests/operations/tenant.isolation.test.tsx (1) [skipped]
   ↓ Operations / Multi-Tenant Isolation (SKIPPED) (1) [skipped]
     ↓ placeholder – will assert cache reset on tenant change [skipped]

 Test Files  11 passed | 3 skipped (14)
      Tests  36 passed | 3 skipped (39)
   Start at  16:45:43
   Duration  1.75s (transform 173ms, setup 381ms, collect 256ms, tests 170ms, environment 515ms, prepare 86ms)

PS C:\Users\mccre\dev\boiler\src\frontend\react-app>
