
 RERUN  src/contexts/TenantContext.tsx

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:20:13)
🔍 API CLIENT: Creating axios instance with baseURL: empty (using Vite proxy)

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:21:13)
🔍 API CLIENT: Expected proxy config:

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:22:13)
  - /api/auth/* → AuthService (port 7001)

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:23:13)
  - /api/* → UserService (port 7002)

stdout | src/components/auth/__tests__/TwoPhaseAuthFlow.test.tsx > Two-Phase Authentication Flow > should complete Phase 1: Login without tenant context
🏢 API CLIENT: Tenant context cleared (using JWT for tenant context)
🔍 AuthContext: Initializing authentication...
🔍 AuthContext: Token check: { hasToken: false, hasRefreshToken: false, tokenExpired: 'no-token' }
🔍 AuthContext: No token found, user not authenticated

stdout | src/components/auth/__tests__/TwoPhaseAuthFlow.test.tsx > Two-Phase Authentication Flow > should complete Phase 1: Login without tenant context
🔍 AuthContext: Login response received: {
  accessToken: 'phase1-token-no-tenant',
  refreshToken: 'refresh-token',
  expiresAt: '2025-09-03T16:47:51.603Z',
  tokenType: 'Bearer',
  user: {
    id: '1',
    email: 'admin@tenant1.com',
    firstName: 'Admin',
    lastName: 'User',
    fullName: 'Admin User',
    phoneNumber: undefined,
    timeZone: 'UTC',
    language: 'en',
    lastLoginAt: undefined,
    emailConfirmed: true,
    isActive: true,
    roles: [ 'Admin' ],
    tenantId: '1',
    createdAt: '2025-09-03T15:47:51.603Z',
    updatedAt: '2025-09-03T15:47:51.603Z',
    preferences: {
      theme: 'light',
      language: 'en',
      timeZone: 'UTC',
      notifications: [Object]
    }
  },
  tenant: {
    id: '1',
    name: 'Default Tenant',
    domain: 'default.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:47:51.603Z',
    updatedAt: '2025-09-03T15:47:51.603Z'
  }
}
🔍 AuthContext: Extracting permissions from token: { tokenClaims: [ 'nameid', 'email' ], permissions: [] }
🔍 AuthContext: Extracting roles from JWT token: {
  tokenClaims: [ 'nameid', 'email' ],
  rolesRaw: [],
  rolesType: 'object'
}

stdout | src/components/auth/__tests__/TwoPhaseAuthFlow.test.tsx > Two-Phase Authentication Flow > should complete Phase 2: Tenant selection
🏢 API CLIENT: Tenant context cleared (using JWT for tenant context)
🔍 AuthContext: Initializing authentication...
🔍 AuthContext: Token check: { hasToken: false, hasRefreshToken: false, tokenExpired: 'no-token' }
🔍 AuthContext: No token found, user not authenticated

stdout | src/components/auth/__tests__/TwoPhaseAuthFlow.test.tsx > Two-Phase Authentication Flow > should complete Phase 2: Tenant selection
🏢 API CLIENT: Tenant context cleared (using JWT for tenant context)
🔍 AuthContext: Initializing authentication...
🔍 AuthContext: Token check: { hasToken: false, hasRefreshToken: false, tokenExpired: 'no-token' }
🔍 AuthContext: No token found, user not authenticated

stdout | src/components/auth/__tests__/TwoPhaseAuthFlow.test.tsx > Two-Phase Authentication Flow > should handle single tenant auto-selection
🏢 API CLIENT: Tenant context cleared (using JWT for tenant context)
🔍 AuthContext: Initializing authentication...
🔍 AuthContext: Token check: { hasToken: false, hasRefreshToken: false, tokenExpired: 'no-token' }
🔍 AuthContext: No token found, user not authenticated

stdout | src/components/auth/__tests__/TwoPhaseAuthFlow.test.tsx > Two-Phase Authentication Flow > should handle single tenant auto-selection
🏢 API CLIENT: Tenant context cleared (using JWT for tenant context)
🔍 AuthContext: Initializing authentication...
🔍 AuthContext: Token check: { hasToken: false, hasRefreshToken: false, tokenExpired: 'no-token' }
🔍 AuthContext: No token found, user not authenticated

stdout | src/components/auth/__tests__/TwoPhaseAuthFlow.test.tsx > Two-Phase Authentication Flow > should handle authentication errors
🏢 API CLIENT: Tenant context cleared (using JWT for tenant context)
🔍 AuthContext: Initializing authentication...
🔍 AuthContext: Token check: { hasToken: false, hasRefreshToken: false, tokenExpired: 'no-token' }
🔍 AuthContext: No token found, user not authenticated

stdout | src/components/auth/__tests__/TwoPhaseAuthFlow.test.tsx > Two-Phase Authentication Flow > should handle authentication errors
<empty line>
stderr | src/components/auth/__tests__/TwoPhaseAuthFlow.test.tsx > Two-Phase Authentication Flow > should handle authentication errors
Login failed: Error: Invalid credentials
    at C:\Users\mccre\dev\boiler\src\frontend\react-app\src\components\auth\__tests__\TwoPhaseAuthFlow.test.tsx:318:7
    at file:///C:/Users/mccre/dev/boiler/src/frontend/react-app/node_modules/@vitest/runner/dist/index.js:135:14
    at file:///C:/Users/mccre/dev/boiler/src/frontend/react-app/node_modules/@vitest/runner/dist/index.js:60:26
    at runTest (file:///C:/Users/mccre/dev/boiler/src/frontend/react-app/node_modules/@vitest/runner/dist/index.js:781:17)
    at runSuite (file:///C:/Users/mccre/dev/boiler/src/frontend/react-app/node_modules/@vitest/runner/dist/index.js:909:15)
    at runSuite (file:///C:/Users/mccre/dev/boiler/src/frontend/react-app/node_modules/@vitest/runner/dist/index.js:909:15)
    at runFiles (file:///C:/Users/mccre/dev/boiler/src/frontend/react-app/node_modules/@vitest/runner/dist/index.js:958:5)
    at startTests (file:///C:/Users/mccre/dev/boiler/src/frontend/react-app/node_modules/@vitest/runner/dist/index.js:967:3)
    at file:///C:/Users/mccre/dev/boiler/src/frontend/react-app/node_modules/vitest/dist/chunks/runtime-runBaseTests.oAvMKtQC.js:116:7
    at withEnv (file:///C:/Users/mccre/dev/boiler/src/frontend/react-app/node_modules/vitest/dist/chunks/runtime-runBaseTests.oAvMKtQC.js:83:5)

stdout | src/components/auth/__tests__/TwoPhaseAuthFlow.test.tsx > Two-Phase Authentication Flow > should handle tenant loading errors
🏢 API CLIENT: Tenant context cleared (using JWT for tenant context)
🔍 AuthContext: Initializing authentication...
🔍 AuthContext: Token check: { hasToken: false, hasRefreshToken: false, tokenExpired: 'no-token' }
🔍 AuthContext: No token found, user not authenticated

stdout | src/components/auth/__tests__/TwoPhaseAuthFlow.test.tsx > Two-Phase Authentication Flow > should handle tenant loading errors
🏢 API CLIENT: Tenant context cleared (using JWT for tenant context)
🔍 AuthContext: Initializing authentication...
🔍 AuthContext: Token check: { hasToken: false, hasRefreshToken: false, tokenExpired: 'no-token' }
🔍 AuthContext: No token found, user not authenticated

stdout | src/components/auth/__tests__/TenantSelector.test.tsx > TenantSelector - Enhanced Tests > Multiple Tenants > calls onTenantSelected when tenant selected then continue clicked
🏢 TenantSelector: Tenant selected: 1

stdout | src/components/auth/__tests__/TenantSelector.test.tsx > TenantSelector - Enhanced Tests > Single Tenant Auto-Selection > invokes onTenantSelected after clicking continue
🏢 TenantSelector: Tenant selected: 1

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:20:13)
🔍 API CLIENT: Creating axios instance with baseURL: empty (using Vite proxy)

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:21:13)
🔍 API CLIENT: Expected proxy config:

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:22:13)
  - /api/auth/* → AuthService (port 7001)

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:23:13)
  - /api/* → UserService (port 7002)

stdout | src/contexts/__tests__/AuthContext.test.tsx > AuthContext > AuthProvider initialization > should initialize with default unauthenticated state
🔍 AuthContext: Initializing authentication...
🔍 AuthContext: Token check: { hasToken: false, hasRefreshToken: false, tokenExpired: 'no-token' }
🔍 AuthContext: No token found, user not authenticated

stdout | src/contexts/__tests__/AuthContext.test.tsx > AuthContext > AuthProvider initialization > should initialize auth when valid token exists
🔍 AuthContext: Initializing authentication...
🔍 AuthContext: Token check: { hasToken: true, hasRefreshToken: true, tokenExpired: false }
🔍 AuthContext: Token valid, validating with backend...
🔍 AuthContext: Extracting permissions from token: {
  tokenClaims: [ 'email', 'roles', 'permissions' ],
  permissions: [ 'users.read' ]
}
🔍 AuthContext: Extracting roles from JWT token: {
  tokenClaims: [ 'email', 'roles', 'permissions' ],
  rolesRaw: [ 'User' ],
  rolesType: 'object'
}
✅ AuthContext: Authentication initialization successful {
  user: 'test@example.com',
  permissions: [ 'users.read' ],
  roles: [ 'User' ]
}

stdout | src/contexts/__tests__/AuthContext.test.tsx > AuthContext > AuthProvider initialization > should refresh token when existing token is expired
🔍 AuthContext: Initializing authentication...
🔍 AuthContext: Token check: { hasToken: true, hasRefreshToken: true, tokenExpired: true }
🔍 AuthContext: Token expired, attempting refresh...
✅ AuthContext: Token refresh successful
🔍 AuthContext: Extracting permissions from token: {
  tokenClaims: [ 'email', 'roles', 'permissions' ],
  permissions: [ 'users.read' ]
}
🔍 AuthContext: Extracting roles from JWT token: {
  tokenClaims: [ 'email', 'roles', 'permissions' ],
  rolesRaw: [ 'User' ],
  rolesType: 'object'
}

stdout | src/contexts/__tests__/AuthContext.test.tsx > AuthContext > AuthProvider initialization > should clear auth when token refresh fails
🔍 AuthContext: Initializing authentication...
🔍 AuthContext: Token check: { hasToken: true, hasRefreshToken: true, tokenExpired: true }
🔍 AuthContext: Token expired, attempting refresh...

stderr | src/contexts/__tests__/AuthContext.test.tsx > AuthContext > AuthProvider initialization > should clear auth when token refresh fails
❌ AuthContext: Token refresh failed: Error: Refresh failed
    at C:\Users\mccre\dev\boiler\src\frontend\react-app\src\contexts\__tests__\AuthContext.test.tsx:282:54
    at file:///C:/Users/mccre/dev/boiler/src/frontend/react-app/node_modules/@vitest/runner/dist/index.js:135:14
    at file:///C:/Users/mccre/dev/boiler/src/frontend/react-app/node_modules/@vitest/runner/dist/index.js:60:26
    at runTest (file:///C:/Users/mccre/dev/boiler/src/frontend/react-app/node_modules/@vitest/runner/dist/index.js:781:17)
    at runNextTicks (node:internal/process/task_queues:65:5)
    at processTimers (node:internal/timers:520:9)
    at runSuite (file:///C:/Users/mccre/dev/boiler/src/frontend/react-app/node_modules/@vitest/runner/dist/index.js:909:15)
    at runSuite (file:///C:/Users/mccre/dev/boiler/src/frontend/react-app/node_modules/@vitest/runner/dist/index.js:909:15)
    at runSuite (file:///C:/Users/mccre/dev/boiler/src/frontend/react-app/node_modules/@vitest/runner/dist/index.js:909:15)
    at runFiles (file:///C:/Users/mccre/dev/boiler/src/frontend/react-app/node_modules/@vitest/runner/dist/index.js:958:5)

stdout | src/contexts/__tests__/AuthContext.test.tsx > AuthContext > login functionality > should login successfully with valid credentials
🔍 AuthContext: Initializing authentication...
🔍 AuthContext: Token check: { hasToken: false, hasRefreshToken: false, tokenExpired: 'no-token' }
🔍 AuthContext: No token found, user not authenticated

stderr | src/contexts/__tests__/AuthContext.test.tsx > AuthContext > login functionality > should login successfully with valid credentials
The current testing environment is not configured to support act(...)

stdout | src/contexts/__tests__/AuthContext.test.tsx > AuthContext > login functionality > should login successfully with valid credentials
🔍 AuthContext: Login response received: {
  accessToken: 'mock-access-token',
  refreshToken: 'mock-refresh-token',
  expiresAt: '2024-01-01T01:00:00Z',
  tokenType: 'Bearer',
  user: {
    id: '1',
    email: 'test@example.com',
    firstName: 'Test',
    lastName: 'User',
    fullName: 'Test User',
    roles: [ 'User', 'Admin' ],
    tenantId: 'tenant1',
    isActive: true,
    emailConfirmed: true,
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-01T00:00:00Z'
  },
  tenant: {
    id: 'tenant1',
    name: 'Test Tenant',
    isActive: true,
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-01T00:00:00Z'
  }
}
🔍 AuthContext: Extracting permissions from token: {
  tokenClaims: [ 'email', 'roles', 'permissions' ],
  permissions: [ 'users.read', 'users.write' ]
}
🔍 AuthContext: Extracting roles from JWT token: {
  tokenClaims: [ 'email', 'roles', 'permissions' ],
  rolesRaw: [ 'User', 'Admin' ],
  rolesType: 'object'
}

stdout | src/contexts/__tests__/AuthContext.test.tsx > AuthContext > login functionality > should handle login failure
🔍 AuthContext: Initializing authentication...
🔍 AuthContext: Token check: { hasToken: false, hasRefreshToken: false, tokenExpired: 'no-token' }
🔍 AuthContext: No token found, user not authenticated

stdout | src/contexts/__tests__/AuthContext.test.tsx > AuthContext > login functionality > should set loading state during login
🔍 AuthContext: Initializing authentication...
🔍 AuthContext: Token check: { hasToken: false, hasRefreshToken: false, tokenExpired: 'no-token' }
🔍 AuthContext: No token found, user not authenticated

stdout | src/contexts/__tests__/AuthContext.test.tsx > AuthContext > login functionality > should set loading state during login
🔍 AuthContext: Login response received: {
  accessToken: 'mock-access-token',
  refreshToken: 'mock-refresh-token',
  expiresAt: '2024-01-01T01:00:00Z',
  tokenType: 'Bearer',
  user: {
    id: '1',
    email: 'test@example.com',
    firstName: 'Test',
    lastName: 'User',
    fullName: 'Test User',
    roles: [ 'User', 'Admin' ],
    tenantId: 'tenant1',
    isActive: true,
    emailConfirmed: true,
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-01T00:00:00Z'
  },
  tenant: {
    id: 'tenant1',
    name: 'Test Tenant',
    isActive: true,
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-01T00:00:00Z'
  }
}
🔍 AuthContext: Extracting permissions from token: {
  tokenClaims: [ 'email', 'roles', 'permissions' ],
  permissions: [ 'users.read' ]
}
🔍 AuthContext: Extracting roles from JWT token: {
  tokenClaims: [ 'email', 'roles', 'permissions' ],
  rolesRaw: [ 'User' ],
  rolesType: 'object'
}

stdout | src/contexts/__tests__/AuthContext.test.tsx > AuthContext > error handling > should clear error when clearError is called
🔍 AuthContext: Initializing authentication...
🔍 AuthContext: Token check: { hasToken: false, hasRefreshToken: false, tokenExpired: 'no-token' }
🔍 AuthContext: No token found, user not authenticated

stdout | src/contexts/__tests__/AuthContext.test.tsx > AuthContext > role and permission extraction > should extract roles from JWT token as array
🔍 AuthContext: Initializing authentication...
🔍 AuthContext: Token check: { hasToken: true, hasRefreshToken: false, tokenExpired: false }
🔍 AuthContext: Token valid, validating with backend...
🔍 AuthContext: Extracting permissions from token: {
  tokenClaims: [ 'http://schemas.microsoft.com/ws/2008/06/identity/claims/role' ],
  permissions: []
}
🔍 AuthContext: Extracting roles from JWT token: {
  tokenClaims: [ 'http://schemas.microsoft.com/ws/2008/06/identity/claims/role' ],
  rolesRaw: [ 'Admin', 'User' ],
  rolesType: 'object'
}
✅ AuthContext: Authentication initialization successful {
  user: 'test@example.com',
  permissions: [],
  roles: [ 'Admin', 'User' ]
}

stdout | src/contexts/__tests__/AuthContext.test.tsx > AuthContext > role and permission extraction > should extract roles from JWT token as comma-separated string
🔍 AuthContext: Initializing authentication...
🔍 AuthContext: Token check: { hasToken: true, hasRefreshToken: false, tokenExpired: false }
🔍 AuthContext: Token valid, validating with backend...
🔍 AuthContext: Extracting permissions from token: { tokenClaims: [ 'role' ], permissions: [] }
🔍 AuthContext: Extracting roles from JWT token: {
  tokenClaims: [ 'role' ],
  rolesRaw: 'Admin,User,Manager',
  rolesType: 'string'
}
✅ AuthContext: Authentication initialization successful {
  user: 'test@example.com',
  permissions: [],
  roles: [ 'Admin', 'User', 'Manager' ]
}

stdout | src/contexts/__tests__/AuthContext.test.tsx > AuthContext > role and permission extraction > should extract permissions from JWT token
🔍 AuthContext: Initializing authentication...
🔍 AuthContext: Token check: { hasToken: true, hasRefreshToken: false, tokenExpired: false }
🔍 AuthContext: Token valid, validating with backend...
🔍 AuthContext: Extracting permissions from token: {
  tokenClaims: [ 'permissions' ],
  permissions: [ 'users.read', 'users.write', 'admin.access' ]
}
🔍 AuthContext: Extracting roles from JWT token: { tokenClaims: [ 'permissions' ], rolesRaw: [], rolesType: 'object' }
✅ AuthContext: Authentication initialization successful {
  user: 'test@example.com',
  permissions: [ 'users.read', 'users.write', 'admin.access' ],
  roles: []
}

stdout | src/contexts/__tests__/AuthContext.test.tsx > AuthContext > role and permission extraction > should handle missing role claims gracefully
🔍 AuthContext: Initializing authentication...
🔍 AuthContext: Token check: { hasToken: true, hasRefreshToken: false, tokenExpired: false }
🔍 AuthContext: Token valid, validating with backend...
🔍 AuthContext: Extracting permissions from token: { tokenClaims: [ 'email' ], permissions: [] }
🔍 AuthContext: Extracting roles from JWT token: { tokenClaims: [ 'email' ], rolesRaw: [], rolesType: 'object' }
✅ AuthContext: Authentication initialization successful { user: 'test@example.com', permissions: [], roles: [] }

stdout | src/contexts/__tests__/AuthContext.test.tsx > AuthContext > role and permission extraction > should handle token parsing errors
🔍 AuthContext: Initializing authentication...
🔍 AuthContext: Token check: { hasToken: true, hasRefreshToken: false, tokenExpired: false }
🔍 AuthContext: Token valid, validating with backend...
✅ AuthContext: Authentication initialization successful { user: 'test@example.com', permissions: [], roles: [] }

stdout | src/contexts/__tests__/AuthContext.test.tsx > AuthContext > register functionality > should register successfully
🔍 AuthContext: Initializing authentication...
🔍 AuthContext: Token check: { hasToken: false, hasRefreshToken: false, tokenExpired: 'no-token' }
🔍 AuthContext: No token found, user not authenticated

stderr | src/contexts/__tests__/AuthContext.test.tsx > AuthContext > register functionality > should register successfully
The current testing environment is not configured to support act(...)

stdout | src/contexts/__tests__/AuthContext.test.tsx > AuthContext > register functionality > should register successfully
🔍 AuthContext: Extracting permissions from token: {
  tokenClaims: [ 'email', 'roles', 'permissions' ],
  permissions: [ 'users.read' ]
}
🔍 AuthContext: Extracting roles from JWT token: {
  tokenClaims: [ 'email', 'roles', 'permissions' ],
  rolesRaw: [ 'User' ],
  rolesType: 'object'
}

stdout | src/contexts/__tests__/AuthContext.test.tsx > AuthContext > register functionality > should handle register failure
🔍 AuthContext: Initializing authentication...
🔍 AuthContext: Token check: { hasToken: false, hasRefreshToken: false, tokenExpired: 'no-token' }
🔍 AuthContext: No token found, user not authenticated

stdout | src/contexts/__tests__/AuthContext.test.tsx > AuthContext > refreshAuth functionality > should refresh auth in non-test mode
🔍 AuthContext: Initializing authentication...
🔍 AuthContext: Token check: { hasToken: true, hasRefreshToken: false, tokenExpired: false }
🔍 AuthContext: Token valid, validating with backend...
🔍 AuthContext: Extracting permissions from token: {
  tokenClaims: [ 'email', 'roles', 'permissions' ],
  permissions: [ 'users.read' ]
}
🔍 AuthContext: Extracting roles from JWT token: {
  tokenClaims: [ 'email', 'roles', 'permissions' ],
  rolesRaw: [ 'User' ],
  rolesType: 'object'
}
✅ AuthContext: Authentication initialization successful {
  user: 'test@example.com',
  permissions: [ 'users.read' ],
  roles: [ 'User' ]
}

stderr | src/contexts/__tests__/AuthContext.test.tsx > AuthContext > refreshAuth functionality > should refresh auth in non-test mode
The current testing environment is not configured to support act(...)

stdout | src/contexts/__tests__/AuthContext.test.tsx > AuthContext > refreshAuth functionality > should refresh auth in non-test mode
🔍 AuthContext: Initializing authentication...
🔍 AuthContext: Token check: { hasToken: true, hasRefreshToken: false, tokenExpired: false }
🔍 AuthContext: Token valid, validating with backend...
🔍 AuthContext: Extracting permissions from token: {
  tokenClaims: [ 'email', 'roles', 'permissions' ],
  permissions: [ 'users.read' ]
}
🔍 AuthContext: Extracting roles from JWT token: {
  tokenClaims: [ 'email', 'roles', 'permissions' ],
  rolesRaw: [ 'User' ],
  rolesType: 'object'
}
✅ AuthContext: Authentication initialization successful {
  user: 'test@example.com',
  permissions: [ 'users.read' ],
  roles: [ 'User' ]
}

stderr | src/contexts/__tests__/AuthContext.test.tsx > AuthContext > refreshAuth functionality > should refresh auth in non-test mode
The current testing environment is not configured to support act(...)

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:20:13)
🔍 API CLIENT: Creating axios instance with baseURL: empty (using Vite proxy)

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:21:13)
🔍 API CLIENT: Expected proxy config:

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:22:13)
  - /api/auth/* → AuthService (port 7001)

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:23:13)
  - /api/* → UserService (port 7002)

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:20:13)
🔍 API CLIENT: Creating axios instance with baseURL: empty (using Vite proxy)

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:21:13)
🔍 API CLIENT: Expected proxy config:

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:22:13)
  - /api/auth/* → AuthService (port 7001)

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:23:13)
  - /api/* → UserService (port 7002)

stdout | src/test/scenarios/api-permission-integration.test.tsx > API Permission Integration Scenarios > API Call Authorization > should allow API calls for users with correct permissions
🏢 API CLIENT: Tenant context cleared (using JWT for tenant context)
🔍 TenantService: Calling API endpoint: /api/users/3/tenants
🚨 API REQUEST (NO AUTH): GET /api/users/3/tenants - No token found!
🎯 MSW: Handling /api/users/:userId/tenants request { userId: '3', scenario: null }
🎯 MSW: Returning multiple tenants scenario
✅ API RESPONSE: /api/users/3/tenants 200
🔍 API CLIENT: Detected .NET 9 ApiResponseDto structure: { success: true, message: undefined, hasData: true, errors: 0 }
🔍 API CLIENT: Unwrapped response for /api/users/3/tenants : [
  {
    id: 1,
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.399Z',
    updatedAt: '2025-09-03T15:49:26.399Z'
  },
  {
    id: 2,
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.399Z',
    updatedAt: '2025-09-03T15:49:26.399Z'
  },
  {
    id: 3,
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.399Z',
    updatedAt: '2025-09-03T15:49:26.399Z'
  }
]
🔍 TenantService: Raw API response: [
  {
    id: 1,
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.399Z',
    updatedAt: '2025-09-03T15:49:26.399Z'
  },
  {
    id: 2,
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.399Z',
    updatedAt: '2025-09-03T15:49:26.399Z'
  },
  {
    id: 3,
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.399Z',
    updatedAt: '2025-09-03T15:49:26.399Z'
  }
]
🔍 TenantService: Converted tenants: [
  {
    id: '1',
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.399Z',
    updatedAt: '2025-09-03T15:49:26.399Z'
  },
  {
    id: '2',
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.399Z',
    updatedAt: '2025-09-03T15:49:26.399Z'
  },
  {
    id: '3',
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.399Z',
    updatedAt: '2025-09-03T15:49:26.399Z'
  }
]

stderr | src/test/scenarios/api-permission-integration.test.tsx > API Permission Integration Scenarios > API Call Authorization > should allow API calls for users with correct permissions
The current testing environment is not configured to support act(...)
The current testing environment is not configured to support act(...)
The current testing environment is not configured to support act(...)

stdout | src/test/scenarios/api-permission-integration.test.tsx > API Permission Integration Scenarios > API Call Authorization > should allow API calls for users with correct permissions
<empty line>
stderr | src/test/scenarios/api-permission-integration.test.tsx > API Permission Integration Scenarios > API Call Authorization > should allow API calls for users with correct permissions
The current testing environment is not configured to support act(...)

stdout | src/test/scenarios/api-permission-integration.test.tsx > API Permission Integration Scenarios > API Call Authorization > should reject API calls for users without permissions
🏢 API CLIENT: Tenant context cleared (using JWT for tenant context)
🔍 TenantService: Calling API endpoint: /api/users/6/tenants
🚨 API REQUEST (NO AUTH): GET /api/users/6/tenants - No token found!
🎯 MSW: Handling /api/users/:userId/tenants request { userId: '6', scenario: null }
🎯 MSW: Returning error scenario

stderr | src/test/scenarios/api-permission-integration.test.tsx > API Permission Integration Scenarios > API Call Authorization > should reject API calls for users without permissions
🚨 API ERROR: /api/users/6/tenants 500 Request failed with status code 500
🚨 API Error Details: {
  message: 'Failed to load tenants',
  errors: [ 'Failed to load tenants' ],
  traceId: undefined
}
🏢 TenantService: API call failed: Error [ApiError]: Failed to load tenants
    at C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:72:35
    at Axios.request (file:///C:/Users/mccre/dev/boiler/src/frontend/react-app/node_modules/axios/lib/core/Axios.js:40:14)
    at ApiClient.get (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:174:12)
    at TenantService.getUserTenants (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\tenant.service.ts:21:24)
    at loadUserTenants (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\contexts\TenantContext.tsx:105:24) {
  response: {
    data: {
      success: false,
      data: null,
      message: 'Failed to load tenants',
      errors: [Array]
    },
    status: 500,
    statusText: 'Internal Server Error',
    headers: Object [AxiosHeaders] {
      'content-length': '100',
      'content-type': 'application/json'
    },
    config: {
      transitional: [Object],
      adapter: [Array],
      transformRequest: [Array],
      transformResponse: [Array],
      timeout: 10000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: [Object],
      validateStatus: [Function: validateStatus],
      headers: [Object [AxiosHeaders]],
      baseURL: '',
      method: 'get',
      url: '/api/users/6/tenants',
      allowAbsoluteUrls: true,
      data: undefined
    },
    request: XMLHttpRequest {
      open: [Function: open],
      setRequestHeader: [Function: setRequestHeader],
      send: [Function: send],
      abort: [Function: abort],
      getResponseHeader: [Function (anonymous)],
      getAllResponseHeaders: [Function (anonymous)],
      overrideMimeType: [Function: overrideMimeType],
      onreadystatechange: [Getter/Setter],
      readyState: 4,
      timeout: [Getter/Setter],
      withCredentials: [Getter/Setter],
      upload: XMLHttpRequestUpload {},
      responseURL: 'http://localhost:3000/api/users/6/tenants',
      status: 500,
      statusText: 'Internal Server Error',
      responseType: [Getter/Setter],
      response: [Getter],
      responseText: [Getter],
      responseXML: [Getter],
      UNSENT: 0,
      OPENED: 1,
      HEADERS_RECEIVED: 2,
      LOADING: 3,
      DONE: 4,
      [Symbol(SameObject caches)]: [Object: null prototype]
    }
  },
  status: 500,
  errors: [ 'Failed to load tenants' ]
}
The current testing environment is not configured to support act(...)
The current testing environment is not configured to support act(...)

stdout | src/test/scenarios/api-permission-integration.test.tsx > API Permission Integration Scenarios > API Call Authorization > should reject API calls for users without permissions
<empty line>
stderr | src/test/scenarios/api-permission-integration.test.tsx > API Permission Integration Scenarios > API Call Authorization > should reject API calls for users without permissions
The current testing environment is not configured to support act(...)

stdout | src/test/scenarios/api-permission-integration.test.tsx > API Permission Integration Scenarios > Role-Based Data Filtering > should filter user data based on role permissions
🏢 API CLIENT: Tenant context cleared (using JWT for tenant context)
🔍 TenantService: Calling API endpoint: /api/users/3/tenants
🚨 API REQUEST (NO AUTH): GET /api/users/3/tenants - No token found!
🎯 MSW: Handling /api/users/:userId/tenants request { userId: '3', scenario: null }
🎯 MSW: Returning multiple tenants scenario
✅ API RESPONSE: /api/users/3/tenants 200
🔍 API CLIENT: Detected .NET 9 ApiResponseDto structure: { success: true, message: undefined, hasData: true, errors: 0 }
🔍 API CLIENT: Unwrapped response for /api/users/3/tenants : [
  {
    id: 1,
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.399Z',
    updatedAt: '2025-09-03T15:49:26.399Z'
  },
  {
    id: 2,
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.399Z',
    updatedAt: '2025-09-03T15:49:26.399Z'
  },
  {
    id: 3,
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.399Z',
    updatedAt: '2025-09-03T15:49:26.399Z'
  }
]
🔍 TenantService: Raw API response: [
  {
    id: 1,
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.399Z',
    updatedAt: '2025-09-03T15:49:26.399Z'
  },
  {
    id: 2,
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.399Z',
    updatedAt: '2025-09-03T15:49:26.399Z'
  },
  {
    id: 3,
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.399Z',
    updatedAt: '2025-09-03T15:49:26.399Z'
  }
]
🔍 TenantService: Converted tenants: [
  {
    id: '1',
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.399Z',
    updatedAt: '2025-09-03T15:49:26.399Z'
  },
  {
    id: '2',
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.399Z',
    updatedAt: '2025-09-03T15:49:26.399Z'
  },
  {
    id: '3',
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.399Z',
    updatedAt: '2025-09-03T15:49:26.399Z'
  }
]

stdout | src/test/scenarios/api-permission-integration.test.tsx > API Permission Integration Scenarios > Role-Based Data Filtering > should limit data for lower privilege users
🏢 API CLIENT: Tenant context cleared (using JWT for tenant context)
🔍 TenantService: Calling API endpoint: /api/users/6/tenants
🚨 API REQUEST (NO AUTH): GET /api/users/6/tenants - No token found!
🎯 MSW: Handling /api/users/:userId/tenants request { userId: '6', scenario: null }
🎯 MSW: Returning error scenario
🎯 MSW: Handling /api/users request { page: 1, pageSize: 10, authHeader: 'Bearer mock-viewer-token' }

stderr | src/test/scenarios/api-permission-integration.test.tsx > API Permission Integration Scenarios > Role-Based Data Filtering > should limit data for lower privilege users
🚨 API ERROR: /api/users/6/tenants 500 Request failed with status code 500
🚨 API Error Details: {
  message: 'Failed to load tenants',
  errors: [ 'Failed to load tenants' ],
  traceId: undefined
}
🏢 TenantService: API call failed: Error [ApiError]: Failed to load tenants
    at C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:72:35
    at Axios.request (file:///C:/Users/mccre/dev/boiler/src/frontend/react-app/node_modules/axios/lib/core/Axios.js:40:14)
    at ApiClient.get (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:174:12)
    at TenantService.getUserTenants (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\tenant.service.ts:21:24)
    at loadUserTenants (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\contexts\TenantContext.tsx:105:24) {
  response: {
    data: {
      success: false,
      data: null,
      message: 'Failed to load tenants',
      errors: [Array]
    },
    status: 500,
    statusText: 'Internal Server Error',
    headers: Object [AxiosHeaders] {
      'content-length': '100',
      'content-type': 'application/json'
    },
    config: {
      transitional: [Object],
      adapter: [Array],
      transformRequest: [Array],
      transformResponse: [Array],
      timeout: 10000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: [Object],
      validateStatus: [Function: validateStatus],
      headers: [Object [AxiosHeaders]],
      baseURL: '',
      method: 'get',
      url: '/api/users/6/tenants',
      allowAbsoluteUrls: true,
      data: undefined
    },
    request: XMLHttpRequest {
      open: [Function: open],
      setRequestHeader: [Function: setRequestHeader],
      send: [Function: send],
      abort: [Function: abort],
      getResponseHeader: [Function (anonymous)],
      getAllResponseHeaders: [Function (anonymous)],
      overrideMimeType: [Function: overrideMimeType],
      onreadystatechange: [Getter/Setter],
      readyState: 4,
      timeout: [Getter/Setter],
      withCredentials: [Getter/Setter],
      upload: XMLHttpRequestUpload {},
      responseURL: 'http://localhost:3000/api/users/6/tenants',
      status: 500,
      statusText: 'Internal Server Error',
      responseType: [Getter/Setter],
      response: [Getter],
      responseText: [Getter],
      responseXML: [Getter],
      UNSENT: 0,
      OPENED: 1,
      HEADERS_RECEIVED: 2,
      LOADING: 3,
      DONE: 4,
      [Symbol(SameObject caches)]: [Object: null prototype]
    }
  },
  status: 500,
  errors: [ 'Failed to load tenants' ]
}

stdout | src/test/scenarios/api-permission-integration.test.tsx > API Permission Integration Scenarios > Permission-Based Error Handling > should handle 403 Forbidden responses gracefully
🏢 API CLIENT: Tenant context cleared (using JWT for tenant context)
🔍 TenantService: Calling API endpoint: /api/users/5/tenants
🚨 API REQUEST (NO AUTH): GET /api/users/5/tenants - No token found!
🎯 MSW: Handling /api/users/:userId/tenants request { userId: '5', scenario: null }
🎯 MSW: Returning multiple tenants scenario
✅ API RESPONSE: /api/users/5/tenants 200
🔍 API CLIENT: Detected .NET 9 ApiResponseDto structure: { success: true, message: undefined, hasData: true, errors: 0 }
🔍 API CLIENT: Unwrapped response for /api/users/5/tenants : [
  {
    id: 1,
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.399Z',
    updatedAt: '2025-09-03T15:49:26.399Z'
  },
  {
    id: 2,
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.399Z',
    updatedAt: '2025-09-03T15:49:26.399Z'
  },
  {
    id: 3,
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.399Z',
    updatedAt: '2025-09-03T15:49:26.399Z'
  }
]
🔍 TenantService: Raw API response: [
  {
    id: 1,
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.399Z',
    updatedAt: '2025-09-03T15:49:26.399Z'
  },
  {
    id: 2,
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.399Z',
    updatedAt: '2025-09-03T15:49:26.399Z'
  },
  {
    id: 3,
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.399Z',
    updatedAt: '2025-09-03T15:49:26.399Z'
  }
]
🔍 TenantService: Converted tenants: [
  {
    id: '1',
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.399Z',
    updatedAt: '2025-09-03T15:49:26.399Z'
  },
  {
    id: '2',
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.399Z',
    updatedAt: '2025-09-03T15:49:26.399Z'
  },
  {
    id: '3',
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.399Z',
    updatedAt: '2025-09-03T15:49:26.399Z'
  }
]

stderr | src/test/scenarios/api-permission-integration.test.tsx > API Permission Integration Scenarios > Permission-Based Error Handling > should handle 403 Forbidden responses gracefully
The current testing environment is not configured to support act(...)
The current testing environment is not configured to support act(...)
The current testing environment is not configured to support act(...)

stdout | src/test/scenarios/api-permission-integration.test.tsx > API Permission Integration Scenarios > Permission-Based Error Handling > should handle 403 Forbidden responses gracefully
<empty line>
stderr | src/test/scenarios/api-permission-integration.test.tsx > API Permission Integration Scenarios > Permission-Based Error Handling > should handle 403 Forbidden responses gracefully
The current testing environment is not configured to support act(...)
The current testing environment is not configured to support act(...)

stdout | src/test/scenarios/api-permission-integration.test.tsx > API Permission Integration Scenarios > Permission-Based Error Handling > should handle successful operations for authorized users
🏢 API CLIENT: Tenant context cleared (using JWT for tenant context)
🔍 TenantService: Calling API endpoint: /api/users/3/tenants
🚨 API REQUEST (NO AUTH): GET /api/users/3/tenants - No token found!
🎯 MSW: Handling /api/users/:userId/tenants request { userId: '3', scenario: null }
🎯 MSW: Returning multiple tenants scenario
✅ API RESPONSE: /api/users/3/tenants 200
🔍 API CLIENT: Detected .NET 9 ApiResponseDto structure: { success: true, message: undefined, hasData: true, errors: 0 }
🔍 API CLIENT: Unwrapped response for /api/users/3/tenants : [
  {
    id: 1,
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.399Z',
    updatedAt: '2025-09-03T15:49:26.399Z'
  },
  {
    id: 2,
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.399Z',
    updatedAt: '2025-09-03T15:49:26.399Z'
  },
  {
    id: 3,
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.399Z',
    updatedAt: '2025-09-03T15:49:26.399Z'
  }
]
🔍 TenantService: Raw API response: [
  {
    id: 1,
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.399Z',
    updatedAt: '2025-09-03T15:49:26.399Z'
  },
  {
    id: 2,
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.399Z',
    updatedAt: '2025-09-03T15:49:26.399Z'
  },
  {
    id: 3,
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.399Z',
    updatedAt: '2025-09-03T15:49:26.399Z'
  }
]
🔍 TenantService: Converted tenants: [
  {
    id: '1',
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.399Z',
    updatedAt: '2025-09-03T15:49:26.399Z'
  },
  {
    id: '2',
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.399Z',
    updatedAt: '2025-09-03T15:49:26.399Z'
  },
  {
    id: '3',
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.399Z',
    updatedAt: '2025-09-03T15:49:26.399Z'
  }
]

stderr | src/test/scenarios/api-permission-integration.test.tsx > API Permission Integration Scenarios > Permission-Based Error Handling > should handle successful operations for authorized users
The current testing environment is not configured to support act(...)
The current testing environment is not configured to support act(...)
The current testing environment is not configured to support act(...)

stdout | src/test/scenarios/api-permission-integration.test.tsx > API Permission Integration Scenarios > Permission-Based Error Handling > should handle successful operations for authorized users
🎯 MSW: Handling DELETE /api/users/:userId request { userId: '1', authHeader: 'Bearer mock-admin-token' }

stderr | src/test/scenarios/api-permission-integration.test.tsx > API Permission Integration Scenarios > Permission-Based Error Handling > should handle successful operations for authorized users
The current testing environment is not configured to support act(...)
The current testing environment is not configured to support act(...)

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:20:13)
🔍 API CLIENT: Creating axios instance with baseURL: empty (using Vite proxy)

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:21:13)
🔍 API CLIENT: Expected proxy config:

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:22:13)
  - /api/auth/* → AuthService (port 7001)

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:23:13)
  - /api/* → UserService (port 7002)

stdout | src/test/scenarios/permission-component-patterns.test.tsx > RBAC Permission Component Patterns > Conditional UI Rendering > should show/hide UI elements based on user permissions
🏢 API CLIENT: Tenant context cleared (using JWT for tenant context)
🔍 TenantService: Calling API endpoint: /api/users/3/tenants
🚨 API REQUEST (NO AUTH): GET /api/users/3/tenants - No token found!
🎯 MSW: Handling /api/users/:userId/tenants request { userId: '3', scenario: null }
🎯 MSW: Returning multiple tenants scenario
✅ API RESPONSE: /api/users/3/tenants 200
🔍 API CLIENT: Detected .NET 9 ApiResponseDto structure: { success: true, message: undefined, hasData: true, errors: 0 }
🔍 API CLIENT: Unwrapped response for /api/users/3/tenants : [
  {
    id: 1,
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: 2,
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: 3,
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  }
]
🔍 TenantService: Raw API response: [
  {
    id: 1,
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: 2,
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: 3,
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  }
]
🔍 TenantService: Converted tenants: [
  {
    id: '1',
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: '2',
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: '3',
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  }
]

stdout | src/test/scenarios/permission-component-patterns.test.tsx > RBAC Permission Component Patterns > Conditional UI Rendering > should show/hide UI elements based on user permissions
🏢 API CLIENT: Tenant context cleared (using JWT for tenant context)
🔍 TenantService: Calling API endpoint: /api/users/5/tenants
🚨 API REQUEST (NO AUTH): GET /api/users/5/tenants - No token found!
🎯 MSW: Handling /api/users/:userId/tenants request { userId: '5', scenario: null }
🎯 MSW: Returning multiple tenants scenario
✅ API RESPONSE: /api/users/5/tenants 200
🔍 API CLIENT: Detected .NET 9 ApiResponseDto structure: { success: true, message: undefined, hasData: true, errors: 0 }
🔍 API CLIENT: Unwrapped response for /api/users/5/tenants : [
  {
    id: 1,
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: 2,
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: 3,
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  }
]
🔍 TenantService: Raw API response: [
  {
    id: 1,
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: 2,
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: 3,
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  }
]
🔍 TenantService: Converted tenants: [
  {
    id: '1',
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: '2',
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: '3',
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  }
]

stderr | src/test/scenarios/permission-component-patterns.test.tsx > RBAC Permission Component Patterns > Conditional UI Rendering > should show/hide UI elements based on user permissions
🚨 API ERROR: /api/users/6/tenants 500 Request failed with status code 500
🚨 API Error Details: {
  message: 'Failed to load tenants',
  errors: [ 'Failed to load tenants' ],
  traceId: undefined
}
🏢 TenantService: API call failed: Error [ApiError]: Failed to load tenants
    at C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:72:35
    at Axios.request (file:///C:/Users/mccre/dev/boiler/src/frontend/react-app/node_modules/axios/lib/core/Axios.js:40:14)
    at ApiClient.get (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:174:12)
    at TenantService.getUserTenants (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\tenant.service.ts:21:24)
    at loadUserTenants (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\contexts\TenantContext.tsx:105:24) {
  response: {
    data: {
      success: false,
      data: null,
      message: 'Failed to load tenants',
      errors: [Array]
    },
    status: 500,
    statusText: 'Internal Server Error',
    headers: Object [AxiosHeaders] {
      'content-length': '100',
      'content-type': 'application/json'
    },
    config: {
      transitional: [Object],
      adapter: [Array],
      transformRequest: [Array],
      transformResponse: [Array],
      timeout: 10000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: [Object],
      validateStatus: [Function: validateStatus],
      headers: [Object [AxiosHeaders]],
      baseURL: '',
      method: 'get',
      url: '/api/users/6/tenants',
      allowAbsoluteUrls: true,
      data: undefined
    },
    request: XMLHttpRequest {
      open: [Function: open],
      setRequestHeader: [Function: setRequestHeader],
      send: [Function: send],
      abort: [Function: abort],
      getResponseHeader: [Function (anonymous)],
      getAllResponseHeaders: [Function (anonymous)],
      overrideMimeType: [Function: overrideMimeType],
      onreadystatechange: [Getter/Setter],
      readyState: 4,
      timeout: [Getter/Setter],
      withCredentials: [Getter/Setter],
      upload: XMLHttpRequestUpload {},
      responseURL: 'http://localhost:3000/api/users/6/tenants',
      status: 500,
      statusText: 'Internal Server Error',
      responseType: [Getter/Setter],
      response: [Getter],
      responseText: [Getter],
      responseXML: [Getter],
      UNSENT: 0,
      OPENED: 1,
      HEADERS_RECEIVED: 2,
      LOADING: 3,
      DONE: 4,
      [Symbol(SameObject caches)]: [Object: null prototype]
    }
  },
  status: 500,
  errors: [ 'Failed to load tenants' ]
}

stdout | src/test/scenarios/permission-component-patterns.test.tsx > RBAC Permission Component Patterns > Conditional UI Rendering > should show/hide UI elements based on user permissions
🏢 API CLIENT: Tenant context cleared (using JWT for tenant context)
🔍 TenantService: Calling API endpoint: /api/users/6/tenants
🚨 API REQUEST (NO AUTH): GET /api/users/6/tenants - No token found!
🎯 MSW: Handling /api/users/:userId/tenants request { userId: '6', scenario: null }
🎯 MSW: Returning error scenario

stdout | src/test/scenarios/permission-component-patterns.test.tsx > RBAC Permission Component Patterns > Form Field Permissions > should enable/disable form fields based on permissions
🏢 API CLIENT: Tenant context cleared (using JWT for tenant context)
🔍 TenantService: Calling API endpoint: /api/users/3/tenants
🏢 API CLIENT: Tenant context cleared (using JWT for tenant context)
🔍 TenantService: Calling API endpoint: /api/users/5/tenants
🏢 API CLIENT: Tenant context cleared (using JWT for tenant context)
🔍 TenantService: Calling API endpoint: /api/users/6/tenants
🚨 API REQUEST (NO AUTH): GET /api/users/3/tenants - No token found!
🚨 API REQUEST (NO AUTH): GET /api/users/5/tenants - No token found!
🚨 API REQUEST (NO AUTH): GET /api/users/6/tenants - No token found!
🎯 MSW: Handling /api/users/:userId/tenants request { userId: '3', scenario: null }
🎯 MSW: Returning multiple tenants scenario
🎯 MSW: Handling /api/users/:userId/tenants request { userId: '5', scenario: null }
🎯 MSW: Returning multiple tenants scenario
🎯 MSW: Handling /api/users/:userId/tenants request { userId: '6', scenario: null }
🎯 MSW: Returning error scenario

stdout | src/test/scenarios/permission-component-patterns.test.tsx > RBAC Permission Component Patterns > Navigation Menu Permissions
✅ API RESPONSE: /api/users/3/tenants 200
🔍 API CLIENT: Detected .NET 9 ApiResponseDto structure: { success: true, message: undefined, hasData: true, errors: 0 }
🔍 API CLIENT: Unwrapped response for /api/users/3/tenants : [
  {
    id: 1,
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: 2,
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: 3,
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  }
]

stdout | src/test/scenarios/permission-component-patterns.test.tsx > RBAC Permission Component Patterns > Navigation Menu Permissions > should show navigation items based on user permissions
✅ API RESPONSE: /api/users/5/tenants 200
🔍 API CLIENT: Detected .NET 9 ApiResponseDto structure: { success: true, message: undefined, hasData: true, errors: 0 }
🔍 API CLIENT: Unwrapped response for /api/users/5/tenants : [
  {
    id: 1,
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: 2,
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: 3,
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  }
]
🔍 TenantService: Raw API response: [
  {
    id: 1,
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: 2,
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: 3,
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  }
]
🔍 TenantService: Converted tenants: [
  {
    id: '1',
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: '2',
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: '3',
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  }
]
🔍 TenantService: Raw API response: [
  {
    id: 1,
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: 2,
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: 3,
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  }
]
🔍 TenantService: Converted tenants: [
  {
    id: '1',
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: '2',
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: '3',
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  }
]
🏢 API CLIENT: Tenant context cleared (using JWT for tenant context)
🔍 TenantService: Calling API endpoint: /api/users/3/tenants
🏢 API CLIENT: Tenant context cleared (using JWT for tenant context)
🔍 TenantService: Calling API endpoint: /api/users/5/tenants
🏢 API CLIENT: Tenant context cleared (using JWT for tenant context)
🔍 TenantService: Calling API endpoint: /api/users/6/tenants
🚨 API REQUEST (NO AUTH): GET /api/users/3/tenants - No token found!
🚨 API REQUEST (NO AUTH): GET /api/users/5/tenants - No token found!
🚨 API REQUEST (NO AUTH): GET /api/users/6/tenants - No token found!
🎯 MSW: Handling /api/users/:userId/tenants request { userId: '3', scenario: null }
🎯 MSW: Returning multiple tenants scenario
🎯 MSW: Handling /api/users/:userId/tenants request { userId: '5', scenario: null }
🎯 MSW: Returning multiple tenants scenario
🎯 MSW: Handling /api/users/:userId/tenants request { userId: '6', scenario: null }
🎯 MSW: Returning error scenario

stderr | src/test/scenarios/permission-component-patterns.test.tsx > RBAC Permission Component Patterns > Navigation Menu Permissions > should show navigation items based on user permissions
🚨 API ERROR: /api/users/6/tenants 500 Request failed with status code 500
🚨 API Error Details: {
  message: 'Failed to load tenants',
  errors: [ 'Failed to load tenants' ],
  traceId: undefined
}
🏢 TenantService: API call failed: Error [ApiError]: Failed to load tenants
    at C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:72:35
    at Axios.request (file:///C:/Users/mccre/dev/boiler/src/frontend/react-app/node_modules/axios/lib/core/Axios.js:40:14)
    at ApiClient.get (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:174:12)
    at TenantService.getUserTenants (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\tenant.service.ts:21:24)
    at loadUserTenants (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\contexts\TenantContext.tsx:105:24) {
  response: {
    data: {
      success: false,
      data: null,
      message: 'Failed to load tenants',
      errors: [Array]
    },
    status: 500,
    statusText: 'Internal Server Error',
    headers: Object [AxiosHeaders] {
      'content-length': '100',
      'content-type': 'application/json'
    },
    config: {
      transitional: [Object],
      adapter: [Array],
      transformRequest: [Array],
      transformResponse: [Array],
      timeout: 10000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: [Object],
      validateStatus: [Function: validateStatus],
      headers: [Object [AxiosHeaders]],
      baseURL: '',
      method: 'get',
      url: '/api/users/6/tenants',
      allowAbsoluteUrls: true,
      data: undefined
    },
    request: XMLHttpRequest {
      open: [Function: open],
      setRequestHeader: [Function: setRequestHeader],
      send: [Function: send],
      abort: [Function: abort],
      getResponseHeader: [Function (anonymous)],
      getAllResponseHeaders: [Function (anonymous)],
      overrideMimeType: [Function: overrideMimeType],
      onreadystatechange: [Getter/Setter],
      readyState: 4,
      timeout: [Getter/Setter],
      withCredentials: [Getter/Setter],
      upload: XMLHttpRequestUpload {},
      responseURL: 'http://localhost:3000/api/users/6/tenants',
      status: 500,
      statusText: 'Internal Server Error',
      responseType: [Getter/Setter],
      response: [Getter],
      responseText: [Getter],
      responseXML: [Getter],
      UNSENT: 0,
      OPENED: 1,
      HEADERS_RECEIVED: 2,
      LOADING: 3,
      DONE: 4,
      [Symbol(SameObject caches)]: [Object: null prototype]
    }
  },
  status: 500,
  errors: [ 'Failed to load tenants' ]
}

stdout | src/test/scenarios/permission-component-patterns.test.tsx > RBAC Permission Component Patterns > Data Table Action Buttons
✅ API RESPONSE: /api/users/3/tenants 200
🔍 API CLIENT: Detected .NET 9 ApiResponseDto structure: { success: true, message: undefined, hasData: true, errors: 0 }
🔍 API CLIENT: Unwrapped response for /api/users/3/tenants : [
  {
    id: 1,
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: 2,
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: 3,
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  }
]

stdout | src/test/scenarios/permission-component-patterns.test.tsx > RBAC Permission Component Patterns > Data Table Action Buttons > should show/hide action buttons based on permissions
✅ API RESPONSE: /api/users/5/tenants 200
🔍 API CLIENT: Detected .NET 9 ApiResponseDto structure: { success: true, message: undefined, hasData: true, errors: 0 }
🔍 API CLIENT: Unwrapped response for /api/users/5/tenants : [
  {
    id: 1,
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: 2,
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: 3,
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  }
]
🔍 TenantService: Raw API response: [
  {
    id: 1,
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: 2,
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: 3,
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  }
]
🔍 TenantService: Converted tenants: [
  {
    id: '1',
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: '2',
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: '3',
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  }
]
🔍 TenantService: Raw API response: [
  {
    id: 1,
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: 2,
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: 3,
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  }
]
🔍 TenantService: Converted tenants: [
  {
    id: '1',
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: '2',
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: '3',
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  }
]
🏢 API CLIENT: Tenant context cleared (using JWT for tenant context)
🔍 TenantService: Calling API endpoint: /api/users/3/tenants
🏢 API CLIENT: Tenant context cleared (using JWT for tenant context)
🔍 TenantService: Calling API endpoint: /api/users/5/tenants
🏢 API CLIENT: Tenant context cleared (using JWT for tenant context)
🔍 TenantService: Calling API endpoint: /api/users/6/tenants
🚨 API REQUEST (NO AUTH): GET /api/users/3/tenants - No token found!
🚨 API REQUEST (NO AUTH): GET /api/users/5/tenants - No token found!
🚨 API REQUEST (NO AUTH): GET /api/users/6/tenants - No token found!
🎯 MSW: Handling /api/users/:userId/tenants request { userId: '3', scenario: null }
🎯 MSW: Returning multiple tenants scenario
🎯 MSW: Handling /api/users/:userId/tenants request { userId: '5', scenario: null }
🎯 MSW: Returning multiple tenants scenario
🎯 MSW: Handling /api/users/:userId/tenants request { userId: '6', scenario: null }
🎯 MSW: Returning error scenario

stderr | src/test/scenarios/permission-component-patterns.test.tsx > RBAC Permission Component Patterns > Data Table Action Buttons > should show/hide action buttons based on permissions
🚨 API ERROR: /api/users/6/tenants 500 Request failed with status code 500
🚨 API Error Details: {
  message: 'Failed to load tenants',
  errors: [ 'Failed to load tenants' ],
  traceId: undefined
}
🏢 TenantService: API call failed: Error [ApiError]: Failed to load tenants
    at C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:72:35
    at Axios.request (file:///C:/Users/mccre/dev/boiler/src/frontend/react-app/node_modules/axios/lib/core/Axios.js:40:14)
    at ApiClient.get (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:174:12)
    at TenantService.getUserTenants (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\tenant.service.ts:21:24)
    at loadUserTenants (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\contexts\TenantContext.tsx:105:24) {
  response: {
    data: {
      success: false,
      data: null,
      message: 'Failed to load tenants',
      errors: [Array]
    },
    status: 500,
    statusText: 'Internal Server Error',
    headers: Object [AxiosHeaders] {
      'content-length': '100',
      'content-type': 'application/json'
    },
    config: {
      transitional: [Object],
      adapter: [Array],
      transformRequest: [Array],
      transformResponse: [Array],
      timeout: 10000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: [Object],
      validateStatus: [Function: validateStatus],
      headers: [Object [AxiosHeaders]],
      baseURL: '',
      method: 'get',
      url: '/api/users/6/tenants',
      allowAbsoluteUrls: true,
      data: undefined
    },
    request: XMLHttpRequest {
      open: [Function: open],
      setRequestHeader: [Function: setRequestHeader],
      send: [Function: send],
      abort: [Function: abort],
      getResponseHeader: [Function (anonymous)],
      getAllResponseHeaders: [Function (anonymous)],
      overrideMimeType: [Function: overrideMimeType],
      onreadystatechange: [Getter/Setter],
      readyState: 4,
      timeout: [Getter/Setter],
      withCredentials: [Getter/Setter],
      upload: XMLHttpRequestUpload {},
      responseURL: 'http://localhost:3000/api/users/6/tenants',
      status: 500,
      statusText: 'Internal Server Error',
      responseType: [Getter/Setter],
      response: [Getter],
      responseText: [Getter],
      responseXML: [Getter],
      UNSENT: 0,
      OPENED: 1,
      HEADERS_RECEIVED: 2,
      LOADING: 3,
      DONE: 4,
      [Symbol(SameObject caches)]: [Object: null prototype]
    }
  },
  status: 500,
  errors: [ 'Failed to load tenants' ]
}

stdout | src/test/scenarios/permission-component-patterns.test.tsx > RBAC Permission Component Patterns
✅ API RESPONSE: /api/users/3/tenants 200
🔍 API CLIENT: Detected .NET 9 ApiResponseDto structure: { success: true, message: undefined, hasData: true, errors: 0 }
🔍 API CLIENT: Unwrapped response for /api/users/3/tenants : [
  {
    id: 1,
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: 2,
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: 3,
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  }
]
✅ API RESPONSE: /api/users/5/tenants 200
🔍 API CLIENT: Detected .NET 9 ApiResponseDto structure: { success: true, message: undefined, hasData: true, errors: 0 }
🔍 API CLIENT: Unwrapped response for /api/users/5/tenants : [
  {
    id: 1,
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: 2,
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: 3,
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  }
]

stdout | src/test/scenarios/permission-component-patterns.test.tsx
🔍 TenantService: Raw API response: [
  {
    id: 1,
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: 2,
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: 3,
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  }
]
🔍 TenantService: Converted tenants: [
  {
    id: '1',
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: '2',
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: '3',
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  }
]
🔍 TenantService: Raw API response: [
  {
    id: 1,
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: 2,
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: 3,
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  }
]
🔍 TenantService: Converted tenants: [
  {
    id: '1',
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: '2',
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  },
  {
    id: '3',
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.816Z',
    updatedAt: '2025-09-03T15:49:26.816Z'
  }
]

stderr | src/test/scenarios/permission-component-patterns.test.tsx
🚨 API ERROR: /api/users/6/tenants 500 Request failed with status code 500
🚨 API Error Details: {
  message: 'Failed to load tenants',
  errors: [ 'Failed to load tenants' ],
  traceId: undefined
}
🏢 TenantService: API call failed: Error [ApiError]: Failed to load tenants
    at C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:72:35
    at Axios.request (file:///C:/Users/mccre/dev/boiler/src/frontend/react-app/node_modules/axios/lib/core/Axios.js:40:14)
    at ApiClient.get (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:174:12)
    at TenantService.getUserTenants (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\tenant.service.ts:21:24)
    at loadUserTenants (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\contexts\TenantContext.tsx:105:24) {
  response: {
    data: {
      success: false,
      data: null,
      message: 'Failed to load tenants',
      errors: [Array]
    },
    status: 500,
    statusText: 'Internal Server Error',
    headers: Object [AxiosHeaders] {
      'content-length': '100',
      'content-type': 'application/json'
    },
    config: {
      transitional: [Object],
      adapter: [Array],
      transformRequest: [Array],
      transformResponse: [Array],
      timeout: 10000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: [Object],
      validateStatus: [Function: validateStatus],
      headers: [Object [AxiosHeaders]],
      baseURL: '',
      method: 'get',
      url: '/api/users/6/tenants',
      allowAbsoluteUrls: true,
      data: undefined
    },
    request: XMLHttpRequest {
      open: [Function: open],
      setRequestHeader: [Function: setRequestHeader],
      send: [Function: send],
      abort: [Function: abort],
      getResponseHeader: [Function (anonymous)],
      getAllResponseHeaders: [Function (anonymous)],
      overrideMimeType: [Function: overrideMimeType],
      onreadystatechange: [Getter/Setter],
      readyState: 4,
      timeout: [Getter/Setter],
      withCredentials: [Getter/Setter],
      upload: XMLHttpRequestUpload {},
      responseURL: 'http://localhost:3000/api/users/6/tenants',
      status: 500,
      statusText: 'Internal Server Error',
      responseType: [Getter/Setter],
      response: [Getter],
      responseText: [Getter],
      responseXML: [Getter],
      UNSENT: 0,
      OPENED: 1,
      HEADERS_RECEIVED: 2,
      LOADING: 3,
      DONE: 4,
      [Symbol(SameObject caches)]: [Object: null prototype]
    }
  },
  status: 500,
  errors: [ 'Failed to load tenants' ]
}

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:20:13)
🔍 API CLIENT: Creating axios instance with baseURL: empty (using Vite proxy)

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:21:13)
🔍 API CLIENT: Expected proxy config:

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:22:13)
  - /api/auth/* → AuthService (port 7001)

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:23:13)
  - /api/* → UserService (port 7002)

stdout | src/test/scenarios/multi-tenant-isolation.test.tsx > Multi-Tenant Permission Isolation Scenarios > Tenant Data Isolation > should isolate tenant data access
🏢 API CLIENT: Tenant context cleared (using JWT for tenant context)
🔍 TenantService: Calling API endpoint: /api/users/3/tenants
🏢 API CLIENT: Tenant context cleared (using JWT for tenant context)
🔍 TenantService: Calling API endpoint: /api/users/3/tenants
🚨 API REQUEST (NO AUTH): GET /api/users/3/tenants - No token found!
🚨 API REQUEST (NO AUTH): GET /api/users/3/tenants - No token found!
🎯 MSW: Handling /api/users/:userId/tenants request { userId: '3', scenario: null }
🎯 MSW: Returning multiple tenants scenario
🎯 MSW: Handling /api/users/:userId/tenants request { userId: '3', scenario: null }
🎯 MSW: Returning multiple tenants scenario

stdout | src/test/scenarios/multi-tenant-isolation.test.tsx > Multi-Tenant Permission Isolation Scenarios > Tenant Data Isolation > should prevent cross-tenant role assignment
✅ API RESPONSE: /api/users/3/tenants 200
🔍 API CLIENT: Detected .NET 9 ApiResponseDto structure: { success: true, message: undefined, hasData: true, errors: 0 }
🔍 API CLIENT: Unwrapped response for /api/users/3/tenants : [
  {
    id: 1,
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  },
  {
    id: 2,
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  },
  {
    id: 3,
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  }
]
🏢 API CLIENT: Tenant context cleared (using JWT for tenant context)
🔍 TenantService: Calling API endpoint: /api/users/3/tenants
✅ API RESPONSE: /api/users/3/tenants 200
🔍 API CLIENT: Detected .NET 9 ApiResponseDto structure: { success: true, message: undefined, hasData: true, errors: 0 }
🔍 API CLIENT: Unwrapped response for /api/users/3/tenants : [
  {
    id: 1,
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  },
  {
    id: 2,
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  },
  {
    id: 3,
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  }
]
🚨 API REQUEST (NO AUTH): GET /api/users/3/tenants - No token found!
🔍 TenantService: Raw API response: [
  {
    id: 1,
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  },
  {
    id: 2,
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  },
  {
    id: 3,
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  }
]
🔍 TenantService: Converted tenants: [
  {
    id: '1',
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  },
  {
    id: '2',
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  },
  {
    id: '3',
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  }
]
🎯 MSW: Handling /api/users/:userId/tenants request { userId: '3', scenario: null }
🎯 MSW: Returning multiple tenants scenario
🔍 TenantService: Raw API response: [
  {
    id: 1,
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  },
  {
    id: 2,
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  },
  {
    id: 3,
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  }
]
🔍 TenantService: Converted tenants: [
  {
    id: '1',
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  },
  {
    id: '2',
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  },
  {
    id: '3',
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  }
]

stdout | src/test/scenarios/multi-tenant-isolation.test.tsx > Multi-Tenant Permission Isolation Scenarios > Tenant-Scoped Permissions
✅ API RESPONSE: /api/users/3/tenants 200
🔍 API CLIENT: Detected .NET 9 ApiResponseDto structure: { success: true, message: undefined, hasData: true, errors: 0 }
🔍 API CLIENT: Unwrapped response for /api/users/3/tenants : [
  {
    id: 1,
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  },
  {
    id: 2,
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  },
  {
    id: 3,
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  }
]

stdout | src/test/scenarios/multi-tenant-isolation.test.tsx > Multi-Tenant Permission Isolation Scenarios > Tenant-Scoped Permissions > should scope permissions to specific tenants
🔍 TenantService: Raw API response: [
  {
    id: 1,
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  },
  {
    id: 2,
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  },
  {
    id: 3,
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  }
]
🔍 TenantService: Converted tenants: [
  {
    id: '1',
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  },
  {
    id: '2',
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  },
  {
    id: '3',
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  }
]
🏢 API CLIENT: Tenant context cleared (using JWT for tenant context)
🔍 TenantService: Calling API endpoint: /api/users/3/tenants
🚨 API REQUEST (NO AUTH): GET /api/users/3/tenants - No token found!
🎯 MSW: Handling /api/users/:userId/tenants request { userId: '3', scenario: null }
🎯 MSW: Returning multiple tenants scenario

stdout | src/test/scenarios/multi-tenant-isolation.test.tsx > Multi-Tenant Permission Isolation Scenarios > Tenant-Scoped Permissions > should allow system admins to access multiple tenants
✅ API RESPONSE: /api/users/3/tenants 200
🔍 API CLIENT: Detected .NET 9 ApiResponseDto structure: { success: true, message: undefined, hasData: true, errors: 0 }
🔍 API CLIENT: Unwrapped response for /api/users/3/tenants : [
  {
    id: 1,
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  },
  {
    id: 2,
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  },
  {
    id: 3,
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  }
]
🏢 API CLIENT: Tenant context cleared (using JWT for tenant context)
🔍 TenantService: Calling API endpoint: /api/users/2/tenants
🚨 API REQUEST (NO AUTH): GET /api/users/2/tenants - No token found!
🔍 TenantService: Raw API response: [
  {
    id: 1,
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  },
  {
    id: 2,
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  },
  {
    id: 3,
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  }
]
🔍 TenantService: Converted tenants: [
  {
    id: '1',
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  },
  {
    id: '2',
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  },
  {
    id: '3',
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  }
]
🎯 MSW: Handling /api/users/:userId/tenants request { userId: '2', scenario: null }
🎯 MSW: Returning single tenant scenario

stdout | src/test/scenarios/multi-tenant-isolation.test.tsx > Multi-Tenant Permission Isolation Scenarios > Tenant Context Switching > should handle tenant context switching for multi-tenant users
🔍 TenantService: Raw API response: [
  {
    id: 1,
    name: 'Single Tenant',
    domain: 'single.local',
    subscriptionPlan: 'Premium',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  }
]
🔍 TenantService: Converted tenants: [
  {
    id: '1',
    name: 'Single Tenant',
    domain: 'single.local',
    subscriptionPlan: 'Premium',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  }
]
🏢 TenantService: Calling select-tenant API for tenant: 1
🚨 API REQUEST (NO AUTH): POST /api/auth/select-tenant - No token found!
🏢 API CLIENT: Tenant context cleared (using JWT for tenant context)
🔍 TenantService: Calling API endpoint: /api/users/2/tenants
🚨 API REQUEST (NO AUTH): GET /api/users/2/tenants - No token found!
🎯 MSW: Handling /api/users/:userId/tenants request { userId: '2', scenario: null }
🎯 MSW: Returning single tenant scenario
🎯 MSW: Handling select-tenant request { tenantId: 1 }

stdout | src/test/scenarios/multi-tenant-isolation.test.tsx > Multi-Tenant Permission Isolation Scenarios > Tenant Context Switching > should restrict tenant switching for single-tenant users
🏢 API CLIENT: Tenant context cleared (using JWT for tenant context)
🔍 TenantService: Calling API endpoint: /api/users/3/tenants
✅ API RESPONSE: /api/users/2/tenants 200
🔍 API CLIENT: Detected .NET 9 ApiResponseDto structure: { success: true, message: undefined, hasData: true, errors: 0 }
🔍 API CLIENT: Unwrapped response for /api/users/2/tenants : [
  {
    id: 1,
    name: 'Single Tenant',
    domain: 'single.local',
    subscriptionPlan: 'Premium',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  }
]
🚨 API REQUEST (NO AUTH): GET /api/users/3/tenants - No token found!
🎯 MSW: Handling /api/users/:userId/tenants request { userId: '3', scenario: null }
🎯 MSW: Returning multiple tenants scenario
🔍 TenantService: Raw API response: [
  {
    id: 1,
    name: 'Single Tenant',
    domain: 'single.local',
    subscriptionPlan: 'Premium',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  }
]
🔍 TenantService: Converted tenants: [
  {
    id: '1',
    name: 'Single Tenant',
    domain: 'single.local',
    subscriptionPlan: 'Premium',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  }
]
🏢 TenantService: Calling select-tenant API for tenant: 1
🚨 API REQUEST (NO AUTH): POST /api/auth/select-tenant - No token found!
✅ API RESPONSE: /api/auth/select-tenant 200
🔍 API CLIENT: Detected .NET 9 ApiResponseDto structure: { success: true, message: undefined, hasData: true, errors: 0 }
🔍 API CLIENT: Unwrapped response for /api/auth/select-tenant : {
  accessToken: 'phase2-token-tenant-1',
  refreshToken: 'refresh-token-updated',
  expiresAt: '2025-09-03T16:49:27.055Z',
  tokenType: 'Bearer',
  user: {
    id: '1',
    email: 'admin@tenant1.com',
    firstName: 'Admin',
    lastName: 'User',
    fullName: 'Admin User',
    timeZone: 'UTC',
    language: 'en',
    emailConfirmed: true,
    isActive: true,
    roles: [ 'User' ],
    tenantId: '1',
    createdAt: '2025-09-03T15:49:27.055Z',
    updatedAt: '2025-09-03T15:49:27.055Z',
    preferences: {
      theme: 'light',
      language: 'en',
      timeZone: 'UTC',
      notifications: [Object]
    }
  },
  tenant: {
    id: '1',
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  }
}
🏢 TenantService: Select tenant API response: {
  accessToken: 'phase2-token-tenant-1',
  refreshToken: 'refresh-token-updated',
  expiresAt: '2025-09-03T16:49:27.055Z',
  tokenType: 'Bearer',
  user: {
    id: '1',
    email: 'admin@tenant1.com',
    firstName: 'Admin',
    lastName: 'User',
    fullName: 'Admin User',
    timeZone: 'UTC',
    language: 'en',
    emailConfirmed: true,
    isActive: true,
    roles: [ 'User' ],
    tenantId: '1',
    createdAt: '2025-09-03T15:49:27.055Z',
    updatedAt: '2025-09-03T15:49:27.055Z',
    preferences: {
      theme: 'light',
      language: 'en',
      timeZone: 'UTC',
      notifications: [Object]
    }
  },
  tenant: {
    id: '1',
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  }
}

stdout | src/test/scenarios/multi-tenant-isolation.test.tsx > Multi-Tenant Permission Isolation Scenarios > Tenant Context Switching
✅ API RESPONSE: /api/users/2/tenants 200
🔍 API CLIENT: Detected .NET 9 ApiResponseDto structure: { success: true, message: undefined, hasData: true, errors: 0 }
🔍 API CLIENT: Unwrapped response for /api/users/2/tenants : [
  {
    id: 1,
    name: 'Single Tenant',
    domain: 'single.local',
    subscriptionPlan: 'Premium',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  }
]
🎯 MSW: Handling select-tenant request { tenantId: 1 }
🔍 TokenManager: Setting new tokens: {
  tokenLength: 21,
  refreshTokenLength: 21,
  isJwt: false,
  newTokenClaims: null
}

stdout | src/test/scenarios/multi-tenant-isolation.test.tsx > Multi-Tenant Permission Isolation Scenarios
✅ API RESPONSE: /api/users/3/tenants 200
🔍 API CLIENT: Detected .NET 9 ApiResponseDto structure: { success: true, message: undefined, hasData: true, errors: 0 }
🔍 API CLIENT: Unwrapped response for /api/users/3/tenants : [
  {
    id: 1,
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  },
  {
    id: 2,
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  },
  {
    id: 3,
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  }
]

stdout | src/test/scenarios/multi-tenant-isolation.test.tsx
🔍 TenantService: Raw API response: [
  {
    id: 1,
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  },
  {
    id: 2,
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  },
  {
    id: 3,
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  }
]
🔍 TenantService: Converted tenants: [
  {
    id: '1',
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  },
  {
    id: '2',
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  },
  {
    id: '3',
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  }
]
✅ API RESPONSE: /api/auth/select-tenant 200
🔍 API CLIENT: Detected .NET 9 ApiResponseDto structure: { success: true, message: undefined, hasData: true, errors: 0 }
🔍 API CLIENT: Unwrapped response for /api/auth/select-tenant : {
  accessToken: 'phase2-token-tenant-1',
  refreshToken: 'refresh-token-updated',
  expiresAt: '2025-09-03T16:49:27.067Z',
  tokenType: 'Bearer',
  user: {
    id: '1',
    email: 'admin@tenant1.com',
    firstName: 'Admin',
    lastName: 'User',
    fullName: 'Admin User',
    timeZone: 'UTC',
    language: 'en',
    emailConfirmed: true,
    isActive: true,
    roles: [ 'User' ],
    tenantId: '1',
    createdAt: '2025-09-03T15:49:27.067Z',
    updatedAt: '2025-09-03T15:49:27.067Z',
    preferences: {
      theme: 'light',
      language: 'en',
      timeZone: 'UTC',
      notifications: [Object]
    }
  },
  tenant: {
    id: '1',
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  }
}
🏢 TenantService: Select tenant API response: {
  accessToken: 'phase2-token-tenant-1',
  refreshToken: 'refresh-token-updated',
  expiresAt: '2025-09-03T16:49:27.067Z',
  tokenType: 'Bearer',
  user: {
    id: '1',
    email: 'admin@tenant1.com',
    firstName: 'Admin',
    lastName: 'User',
    fullName: 'Admin User',
    timeZone: 'UTC',
    language: 'en',
    emailConfirmed: true,
    isActive: true,
    roles: [ 'User' ],
    tenantId: '1',
    createdAt: '2025-09-03T15:49:27.067Z',
    updatedAt: '2025-09-03T15:49:27.067Z',
    preferences: {
      theme: 'light',
      language: 'en',
      timeZone: 'UTC',
      notifications: [Object]
    }
  },
  tenant: {
    id: '1',
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:26.996Z',
    updatedAt: '2025-09-03T15:49:26.996Z'
  }
}
🔍 TokenManager: Setting new tokens: {
  tokenLength: 21,
  refreshTokenLength: 21,
  isJwt: false,
  newTokenClaims: null
}

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:20:13)
🔍 API CLIENT: Creating axios instance with baseURL: empty (using Vite proxy)

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:21:13)
🔍 API CLIENT: Expected proxy config:

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:22:13)
  - /api/auth/* → AuthService (port 7001)

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:23:13)
  - /api/* → UserService (port 7002)

stdout | src/test/examples/rbac-usage-examples.test.tsx > RBAC Usage Examples > Component Testing Examples > should render components with different roles
🏢 API CLIENT: Tenant context cleared (using JWT for tenant context)
🔍 TenantService: Calling API endpoint: /api/users/3/tenants
🚨 API REQUEST (NO AUTH): GET /api/users/3/tenants - No token found!
🎯 MSW: Handling /api/users/:userId/tenants request { userId: '3', scenario: null }
🎯 MSW: Returning multiple tenants scenario

stdout | src/test/examples/rbac-usage-examples.test.tsx > RBAC Usage Examples > Component Testing Examples > should render components as regular user
🏢 API CLIENT: Tenant context cleared (using JWT for tenant context)
🔍 TenantService: Calling API endpoint: /api/users/5/tenants
🚨 API REQUEST (NO AUTH): GET /api/users/5/tenants - No token found!
🎯 MSW: Handling /api/users/:userId/tenants request { userId: '5', scenario: null }
🎯 MSW: Returning multiple tenants scenario
✅ API RESPONSE: /api/users/3/tenants 200
🔍 API CLIENT: Detected .NET 9 ApiResponseDto structure: { success: true, message: undefined, hasData: true, errors: 0 }
🔍 API CLIENT: Unwrapped response for /api/users/3/tenants : [
  {
    id: 1,
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:27.098Z',
    updatedAt: '2025-09-03T15:49:27.098Z'
  },
  {
    id: 2,
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:27.098Z',
    updatedAt: '2025-09-03T15:49:27.098Z'
  },
  {
    id: 3,
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:27.098Z',
    updatedAt: '2025-09-03T15:49:27.098Z'
  }
]
🔍 TenantService: Raw API response: [
  {
    id: 1,
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:27.098Z',
    updatedAt: '2025-09-03T15:49:27.098Z'
  },
  {
    id: 2,
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:27.098Z',
    updatedAt: '2025-09-03T15:49:27.098Z'
  },
  {
    id: 3,
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:27.098Z',
    updatedAt: '2025-09-03T15:49:27.098Z'
  }
]
🔍 TenantService: Converted tenants: [
  {
    id: '1',
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:27.098Z',
    updatedAt: '2025-09-03T15:49:27.098Z'
  },
  {
    id: '2',
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:27.098Z',
    updatedAt: '2025-09-03T15:49:27.098Z'
  },
  {
    id: '3',
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:27.098Z',
    updatedAt: '2025-09-03T15:49:27.098Z'
  }
]

stdout | src/test/examples/rbac-usage-examples.test.tsx > RBAC Usage Examples > Component Testing Examples > should render components as viewer
🏢 API CLIENT: Tenant context cleared (using JWT for tenant context)
🔍 TenantService: Calling API endpoint: /api/users/6/tenants
🚨 API REQUEST (NO AUTH): GET /api/users/6/tenants - No token found!
🎯 MSW: Handling /api/users/:userId/tenants request { userId: '6', scenario: null }
🎯 MSW: Returning error scenario
✅ API RESPONSE: /api/users/5/tenants 200
🔍 API CLIENT: Detected .NET 9 ApiResponseDto structure: { success: true, message: undefined, hasData: true, errors: 0 }
🔍 API CLIENT: Unwrapped response for /api/users/5/tenants : [
  {
    id: 1,
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:27.098Z',
    updatedAt: '2025-09-03T15:49:27.098Z'
  },
  {
    id: 2,
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:27.098Z',
    updatedAt: '2025-09-03T15:49:27.098Z'
  },
  {
    id: 3,
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:27.098Z',
    updatedAt: '2025-09-03T15:49:27.098Z'
  }
]
🔍 TenantService: Raw API response: [
  {
    id: 1,
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:27.098Z',
    updatedAt: '2025-09-03T15:49:27.098Z'
  },
  {
    id: 2,
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:27.098Z',
    updatedAt: '2025-09-03T15:49:27.098Z'
  },
  {
    id: 3,
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:27.098Z',
    updatedAt: '2025-09-03T15:49:27.098Z'
  }
]
🔍 TenantService: Converted tenants: [
  {
    id: '1',
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:27.098Z',
    updatedAt: '2025-09-03T15:49:27.098Z'
  },
  {
    id: '2',
    name: 'Tenant One',
    domain: 'tenant1.test',
    subscriptionPlan: 'Basic',
    isActive: true,
    createdAt: '2025-09-03T15:49:27.098Z',
    updatedAt: '2025-09-03T15:49:27.098Z'
  },
  {
    id: '3',
    name: 'Tenant Two',
    domain: 'tenant2.test',
    subscriptionPlan: 'Pro',
    isActive: true,
    createdAt: '2025-09-03T15:49:27.098Z',
    updatedAt: '2025-09-03T15:49:27.098Z'
  }
]

stderr | src/test/examples/rbac-usage-examples.test.tsx > RBAC Usage Examples > System vs Tenant Role Examples > should distinguish between system and tenant roles
🚨 API ERROR: /api/users/6/tenants 500 Request failed with status code 500
🚨 API Error Details: {
  message: 'Failed to load tenants',
  errors: [ 'Failed to load tenants' ],
  traceId: undefined
}
🏢 TenantService: API call failed: Error [ApiError]: Failed to load tenants
    at C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:72:35
    at processTicksAndRejections (node:internal/process/task_queues:105:5)
    at Axios.request (file:///C:/Users/mccre/dev/boiler/src/frontend/react-app/node_modules/axios/lib/core/Axios.js:40:14)
    at ApiClient.get (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:174:12)
    at TenantService.getUserTenants (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\tenant.service.ts:21:24)
    at loadUserTenants (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\contexts\TenantContext.tsx:105:24) {
  response: {
    data: {
      success: false,
      data: null,
      message: 'Failed to load tenants',
      errors: [Array]
    },
    status: 500,
    statusText: 'Internal Server Error',
    headers: Object [AxiosHeaders] {
      'content-length': '100',
      'content-type': 'application/json'
    },
    config: {
      transitional: [Object],
      adapter: [Array],
      transformRequest: [Array],
      transformResponse: [Array],
      timeout: 10000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: [Object],
      validateStatus: [Function: validateStatus],
      headers: [Object [AxiosHeaders]],
      baseURL: '',
      method: 'get',
      url: '/api/users/6/tenants',
      allowAbsoluteUrls: true,
      data: undefined
    },
    request: XMLHttpRequest {
      open: [Function: open],
      setRequestHeader: [Function: setRequestHeader],
      send: [Function: send],
      abort: [Function: abort],
      getResponseHeader: [Function (anonymous)],
      getAllResponseHeaders: [Function (anonymous)],
      overrideMimeType: [Function: overrideMimeType],
      onreadystatechange: [Getter/Setter],
      readyState: 4,
      timeout: [Getter/Setter],
      withCredentials: [Getter/Setter],
      upload: XMLHttpRequestUpload {},
      responseURL: 'http://localhost:3000/api/users/6/tenants',
      status: 500,
      statusText: 'Internal Server Error',
      responseType: [Getter/Setter],
      response: [Getter],
      responseText: [Getter],
      responseXML: [Getter],
      UNSENT: 0,
      OPENED: 1,
      HEADERS_RECEIVED: 2,
      LOADING: 3,
      DONE: 4,
      [Symbol(SameObject caches)]: [Object: null prototype]
    }
  },
  status: 500,
  errors: [ 'Failed to load tenants' ]
}

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:20:13)
🔍 API CLIENT: Creating axios instance with baseURL: empty (using Vite proxy)

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:21:13)
🔍 API CLIENT: Expected proxy config:

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:22:13)
  - /api/auth/* → AuthService (port 7001)

stdout | new ApiClient (C:\Users\mccre\dev\boiler\src\frontend\react-app\src\services\api.client.ts:23:13)
  - /api/* → UserService (port 7002)

stdout | src/test/scenarios/role-hierarchy-scenarios.test.tsx > Role Hierarchy Validation Scenarios > System vs Tenant Role Separation > should separate system-level and tenant-level permissions
🏢 API CLIENT: Tenant context cleared (using JWT for tenant context)
🔍 TenantService: Calling API endpoint: /api/users/2/tenants
🚨 API REQUEST (NO AUTH): GET /api/users/2/tenants - No token found!
🎯 MSW: Handling /api/users/:userId/tenants request { userId: '2', scenario: null }
🎯 MSW: Returning single tenant scenario

stdout | src/test/scenarios/role-hierarchy-scenarios.test.tsx > Role Hierarchy Validation Scenarios > System vs Tenant Role Separation > should validate system role permissions
✅ API RESPONSE: /api/users/2/tenants 200
🔍 API CLIENT: Detected .NET 9 ApiResponseDto structure: { success: true, message: undefined, hasData: true, errors: 0 }
🔍 API CLIENT: Unwrapped response for /api/users/2/tenants : [
  {
    id: 1,
    name: 'Single Tenant',
    domain: 'single.local',
    subscriptionPlan: 'Premium',
    isActive: true,
    createdAt: '2025-09-03T15:49:27.145Z',
    updatedAt: '2025-09-03T15:49:27.145Z'
  }
]
🔍 TenantService: Raw API response: [
  {
    id: 1,
    name: 'Single Tenant',
    domain: 'single.local',
    subscriptionPlan: 'Premium',
    isActive: true,
    createdAt: '2025-09-03T15:49:27.145Z',
    updatedAt: '2025-09-03T15:49:27.145Z'
  }
]
🔍 TenantService: Converted tenants: [
  {
    id: '1',
    name: 'Single Tenant',
    domain: 'single.local',
    subscriptionPlan: 'Premium',
    isActive: true,
    createdAt: '2025-09-03T15:49:27.145Z',
    updatedAt: '2025-09-03T15:49:27.145Z'
  }
]
🏢 TenantService: Calling select-tenant API for tenant: 1
🚨 API REQUEST (NO AUTH): POST /api/auth/select-tenant - No token found!

stdout | src/test/scenarios/role-hierarchy-scenarios.test.tsx > Role Hierarchy Validation Scenarios > System vs Tenant Role Separation
🎯 MSW: Handling select-tenant request { tenantId: 1 }

stdout | src/test/scenarios/role-hierarchy-scenarios.test.tsx > Role Hierarchy Validation Scenarios > Multi-Role User Scenarios > should handle users with multiple roles correctly
🏢 API CLIENT: Tenant context cleared (using JWT for tenant context)
🔍 TenantService: Calling API endpoint: /api/users/7/tenants
🚨 API REQUEST (NO AUTH): GET /api/users/7/tenants - No token found!
🎯 MSW: Handling /api/users/:userId/tenants request { userId: '7', scenario: null }
🎯 MSW: Returning no tenants scenario
✅ API RESPONSE: /api/auth/select-tenant 200
🔍 API CLIENT: Detected .NET 9 ApiResponseDto structure: { success: true, message: undefined, hasData: true, errors: 0 }
🔍 API CLIENT: Unwrapped response for /api/auth/select-tenant : {
  accessToken: 'phase2-token-tenant-1',
  refreshToken: 'refresh-token-updated',
  expiresAt: '2025-09-03T16:49:27.172Z',
  tokenType: 'Bearer',
  user: {
    id: '1',
    email: 'admin@tenant1.com',
    firstName: 'Admin',
    lastName: 'User',
    fullName: 'Admin User',
    timeZone: 'UTC',
    language: 'en',
    emailConfirmed: true,
    isActive: true,
    roles: [ 'User' ],
    tenantId: '1',
    createdAt: '2025-09-03T15:49:27.172Z',
    updatedAt: '2025-09-03T15:49:27.172Z',
    preferences: {
      theme: 'light',
      language: 'en',
      timeZone: 'UTC',
      notifications: [Object]
    }
  },
  tenant: {
    id: '1',
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:27.145Z',
    updatedAt: '2025-09-03T15:49:27.145Z'
  }
}
🏢 TenantService: Select tenant API response: {
  accessToken: 'phase2-token-tenant-1',
  refreshToken: 'refresh-token-updated',
  expiresAt: '2025-09-03T16:49:27.172Z',
  tokenType: 'Bearer',
  user: {
    id: '1',
    email: 'admin@tenant1.com',
    firstName: 'Admin',
    lastName: 'User',
    fullName: 'Admin User',
    timeZone: 'UTC',
    language: 'en',
    emailConfirmed: true,
    isActive: true,
    roles: [ 'User' ],
    tenantId: '1',
    createdAt: '2025-09-03T15:49:27.172Z',
    updatedAt: '2025-09-03T15:49:27.172Z',
    preferences: {
      theme: 'light',
      language: 'en',
      timeZone: 'UTC',
      notifications: [Object]
    }
  },
  tenant: {
    id: '1',
    name: 'Test Tenant',
    domain: 'test.local',
    subscriptionPlan: 'Development',
    isActive: true,
    createdAt: '2025-09-03T15:49:27.145Z',
    updatedAt: '2025-09-03T15:49:27.145Z'
  }
}

stdout | src/test/scenarios/role-hierarchy-scenarios.test.tsx > Role Hierarchy Validation Scenarios > Multi-Role User Scenarios > should prioritize highest role level for admin checks
🔍 TokenManager: Setting new tokens: {
  tokenLength: 21,
  refreshTokenLength: 21,
  isJwt: false,
  newTokenClaims: null
}
✅ API RESPONSE: /api/users/7/tenants 200
🔍 API CLIENT: Detected .NET 9 ApiResponseDto structure: { success: true, message: undefined, hasData: true, errors: 0 }
🔍 API CLIENT: Unwrapped response for /api/users/7/tenants : []
🔍 TenantService: Raw API response: []

 ✓ src/contexts/__tests__/AuthContext.test.tsx (26) 1178ms
   ✓ AuthContext (26) 1178ms
     ✓ useAuth hook (1)
       ✓ should throw error when used outside AuthProvider
     ✓ AuthProvider initialization (6)
       ✓ should initialize with default unauthenticated state
       ✓ should initialize with test mode when mockUser provided
       ✓ should initialize with loading state when mockAuthState is loading
       ✓ should initialize auth when valid token exists
       ✓ should refresh token when existing token is expired
       ✓ should clear auth when token refresh fails
     ✓ login functionality (3)
       ✓ should login successfully with valid credentials
       ✓ should handle login failure
       ✓ should set loading state during login
     ✓ logout functionality (3)
       ✓ should logout successfully
       ✓ should handle logout service failure gracefully
       ✓ should not call tokenManager in test mode
     ✓ error handling (1)
       ✓ should clear error when clearError is called
     ✓ role and permission extraction (5)
       ✓ should extract roles from JWT token as array
       ✓ should extract roles from JWT token as comma-separated string
       ✓ should extract permissions from JWT token
       ✓ should handle missing role claims gracefully
       ✓ should handle token parsing errors
     ✓ register functionality (2)
       ✓ should register successfully
       ✓ should handle register failure
     ✓ auth event listener (1)
       ✓ should listen for auth:logout events
     ✓ refreshAuth functionality (2)
       ✓ should refresh auth in non-test mode
       ✓ should not refresh auth in test mode
     ✓ multiple role handling (2)
       ✓ should handle user with multiple roles from user object
       ✓ should handle single role from user object
 ❯ src/contexts/__tests__/TenantContext.test.tsx (12) 58401ms
   ❯ TenantContext - Enhanced Tests (12) 58400ms
     ❯ Single Tenant Auto-Selection (2) 16037ms
       × should load and auto-select single tenant (retry x1) 16031ms
       ✓ should call selectTenant API for single tenant
     ❯ Multiple Tenants (2) 18104ms
       × should show tenant selector for multiple tenants (retry x1) 16052ms
       × should complete tenant selection for multiple tenants (retry x1) 2052ms
     ❯ Tenant Switching (2) 4073ms
       × should switch between tenants (retry x1) 2015ms
       × should set redirect flag after successful switch (retry x1) 2058ms
     ❯ Error Handling (3) 2092ms
       ✓ should handle getUserTenants API failure
       ✓ should handle selectTenant API failure
       × should handle switchTenant API failure (retry x1) 2053ms
     ❯ Loading States (1) 16048ms
       × should show loading state while fetching tenants (retry x1) 16048ms
     ❯ JWT Token Integration (1) 2032ms
       × should handle page refresh with existing JWT tenant (retry x1) 2032ms
     ✓ No Tenants Scenario (1)
       ✓ should handle user with no tenant access
 ✓ src/test/scenarios/api-permission-integration.test.tsx (6) 386ms
   ✓ API Permission Integration Scenarios (6) 386ms
     ✓ API Call Authorization (2)
       ✓ should allow API calls for users with correct permissions
       ✓ should reject API calls for users without permissions
     ✓ Role-Based Data Filtering (2)
       ✓ should filter user data based on role permissions
       ✓ should limit data for lower privilege users
     ✓ Permission-Based Error Handling (2)
       ✓ should handle 403 Forbidden responses gracefully
       ✓ should handle successful operations for authorized users
 ✓ src/test/scenarios/permission-component-patterns.test.tsx (4)
   ✓ RBAC Permission Component Patterns (4)
     ✓ Conditional UI Rendering (1)
       ✓ should show/hide UI elements based on user permissions
     ✓ Form Field Permissions (1)
       ✓ should enable/disable form fields based on permissions
     ✓ Navigation Menu Permissions (1)
       ✓ should show navigation items based on user permissions
     ✓ Data Table Action Buttons (1)
       ✓ should show/hide action buttons based on permissions
 ✓ src/test/scenarios/role-hierarchy-scenarios.test.tsx (6)
   ✓ Role Hierarchy Validation Scenarios (6)
     ✓ Permission Inheritance (2)
       ✓ should validate role hierarchy levels
       ✓ should ensure higher roles have more permissions than lower roles
     ✓ System vs Tenant Role Separation (2)
       ✓ should separate system-level and tenant-level permissions
       ✓ should validate system role permissions
     ✓ Multi-Role User Scenarios (2)
       ✓ should handle users with multiple roles correctly
       ✓ should prioritize highest role level for admin checks
 ✓ src/test/examples/rbac-usage-examples.test.tsx (8)
   ✓ RBAC Usage Examples (8)
     ✓ Basic Permission Checks (3)
       ✓ should demonstrate basic permission checking
       ✓ should demonstrate role hierarchy checks
       ✓ should demonstrate multi-role user handling
     ✓ Component Testing Examples (3)
       ✓ should render components with different roles
       ✓ should render components as regular user
       ✓ should render components as viewer
     ✓ System vs Tenant Role Examples (2)
       ✓ should distinguish between system and tenant roles
       ✓ should handle super admin permissions
 ✓ src/test/scenarios/multi-tenant-isolation.test.tsx (6)
   ✓ Multi-Tenant Permission Isolation Scenarios (6)
     ✓ Tenant Data Isolation (2)
       ✓ should isolate tenant data access
       ✓ should prevent cross-tenant role assignment
     ✓ Tenant-Scoped Permissions (2)
       ✓ should scope permissions to specific tenants
       ✓ should allow system admins to access multiple tenants
     ✓ Tenant Context Switching (2)
       ✓ should handle tenant context switching for multi-tenant users
       ✓ should restrict tenant switching for single-tenant users
 ❯ src/components/auth/__tests__/TwoPhaseAuthFlow.test.tsx (5) 31963ms
   ❯ Two-Phase Authentication Flow (5) 31960ms
     ✓ should complete Phase 1: Login without tenant context 975ms
     × should complete Phase 2: Tenant selection (retry x1) 10081ms
     × should handle single tenant auto-selection (retry x1) 10053ms
     ✓ should handle authentication errors 789ms
     × should handle tenant loading errors (retry x1) 10062ms
 ✓ src/components/auth/__tests__/TenantSelector.test.tsx (11) 660ms
   ✓ TenantSelector - Enhanced Tests (11) 659ms
     ✓ Multiple Tenants (3) 307ms
       ✓ displays tenants and heading (no duplicate query issues)
       ✓ calls onTenantSelected when tenant selected then continue clicked
       ✓ shows subscription plan badges
     ✓ Single Tenant Auto-Selection (2)
       ✓ auto-selects the single tenant and shows Continue button
       ✓ invokes onTenantSelected after clicking continue
     ✓ Loading and Error States (4)
       ✓ shows loading state
       ✓ shows error state
       ✓ shows no tenants message
       ✓ disables continue button when nothing selected
     ✓ Selection Interaction (2)
       ✓ enables continue button after selecting a tenant
       ✓ shows visual selection feedback (aria-selected)
 ✓ src/components/__tests__/routes/AppRoutes.test.tsx (6)
   ✓ AppRoutes (6)
     ✓ renders role details on /roles/:id route
     ✓ renders role editor on /roles/:id/edit route
     ✓ renders role editor on /roles/new route
     ✓ renders role list on /roles route
     ✓ redirects root to dashboard
     ✓ renders login form on /login route
 ❯ src/components/__tests__/roles/RoleList.test.tsx (2) 2074ms
   ❯ RoleList (2) 2074ms
     × renders role data (retry x1) 2048ms
     ✓ shows loading state
 ✓ src/components/layout/__tests__/UserMenu.test.tsx (2) 317ms
   ✓ UserMenu (2) 317ms
     ✓ should display current tenant in user menu
     ✓ should not show tenant switching option for single tenant

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯ Failed Tests 12 ⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/contexts/__tests__/TenantContext.test.tsx > TenantContext - Enhanced Tests > Single Tenant Auto-Selection > should load and auto-select single tenant
TestingLibraryElementError: Found multiple elements by: [data-testid="current-tenant"]

Here are the matching elements:

Ignored nodes: comments, script, style
<div
  data-testid="current-tenant"
>
  Test Tenant
</div>

Ignored nodes: comments, script, style
<span
  data-testid="current-tenant"
>
  Test Tenant
</span>

(If this is intentional, then use the `*AllBy*` variant of the query (like `queryAllByText`, `getAllByText`, or `findAllByText`)).

Ignored nodes: comments, script, style
<body>
  <div>
    <div
      data-testid="auth-provider"
    >
      <div>
        <div
          data-testid="current-tenant"
        >
          Test Tenant
        </div>
        <div
          data-testid="available-count"
        >
          1
        </div>
        <div
          data-testid="show-selector"
        >
          false
        </div>
        <div
          data-testid="should-redirect"
        >
          false
        </div>
        <button
          data-testid="switch-tenant"
        >
          Switch Tenant
        </button>
        <button
          data-testid="complete-selection"
        >
          Complete Selection
        </button>
      </div>
      <div
        data-testid="tenant-context-probe"
        style="display: none;"
      >
        <span
          data-testid="current-tenant"
        >
          Test Tenant
        </span>
        <span
          data-testid="available-count"
        >
          1
        </span>
        <span
          data-testid="tenant-loading"
        >
          0
        </span>
        <span
          data-testid="tenant-error"
        />
        <span
          data-testid="tenant-show-selector"
        >
          0
        </span>
      </div>
    </div>
  </div>
</body>

Ignored nodes: comments, script, style
<html>
  <head>
    <meta
      content=""
      name="emotion-insertion-point"
    />
  </head>
  <body>
    <div>
      <div
        data-testid="auth-provider"
      >
        <div>
          <div
            data-testid="current-tenant"
          >
            Test Tenant
          </div>
          <div
            data-testid="available-count"
          >
            1
          </div>
          <div
            data-testid="show-selector"
          >
            false
          </div>
          <div
            data-testid="should-redirect"
          >
            false
          </div>
          <button
            data-testid="switch-tenant"
          >
            Switch Tenant
          </button>
          <button
            data-testid="complete-selection"
          >
            Complete Selection
          </button>
        </div>
        <div
          data-testid="tenant-context-probe"
          style="display: none;"
        >
          <span
            data-testid="current-tenant"
          >
            Test Tenant
          </span>
          <span
            data-testid="available-count"
          >
            1
          </span>
          <span
            data-testid="tenant-loading"
          >
            0
          </span>
          <span
            data-testid="tenant-error"
          />
          <span
            data-testid="tenant-show-selector"
          >
            0
          </span>
        </div>
      </div>
    </div>
  </body>
</html>...
 ❯ Proxy.waitForWrapper node_modules/@testing-library/dom/dist/wait-for.js:163:27
 ❯ src/contexts/__tests__/TenantContext.test.tsx:244:13
    242|       render(<TestWrapper />)
    243|
    244|       await waitFor(() => {
       |             ^
    245|         expect(screen.getByTestId('current-tenant')).toHaveTextContent('Test Tenant')
    246|       }, { timeout: 8000 })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/24]⎯

 FAIL  src/contexts/__tests__/TenantContext.test.tsx > TenantContext - Enhanced Tests > Single Tenant Auto-Selection > should load and auto-select single tenant
TestingLibraryElementError: Found multiple elements by: [data-testid="current-tenant"]

Here are the matching elements:

Ignored nodes: comments, script, style
<div
  data-testid="current-tenant"
>
  Test Tenant
</div>

Ignored nodes: comments, script, style
<span
  data-testid="current-tenant"
>
  Test Tenant
</span>

(If this is intentional, then use the `*AllBy*` variant of the query (like `queryAllByText`, `getAllByText`, or `findAllByText`)).

Ignored nodes: comments, script, style
<body>
  <div>
    <div
      data-testid="auth-provider"
    >
      <div>
        <div
          data-testid="current-tenant"
        >
          Test Tenant
        </div>
        <div
          data-testid="available-count"
        >
          1
        </div>
        <div
          data-testid="show-selector"
        >
          false
        </div>
        <div
          data-testid="should-redirect"
        >
          false
        </div>
        <button
          data-testid="switch-tenant"
        >
          Switch Tenant
        </button>
        <button
          data-testid="complete-selection"
        >
          Complete Selection
        </button>
      </div>
      <div
        data-testid="tenant-context-probe"
        style="display: none;"
      >
        <span
          data-testid="current-tenant"
        >
          Test Tenant
        </span>
        <span
          data-testid="available-count"
        >
          1
        </span>
        <span
          data-testid="tenant-loading"
        >
          0
        </span>
        <span
          data-testid="tenant-error"
        />
        <span
          data-testid="tenant-show-selector"
        >
          0
        </span>
      </div>
    </div>
  </div>
</body>

Ignored nodes: comments, script, style
<html>
  <head>
    <meta
      content=""
      name="emotion-insertion-point"
    />
  </head>
  <body>
    <div>
      <div
        data-testid="auth-provider"
      >
        <div>
          <div
            data-testid="current-tenant"
          >
            Test Tenant
          </div>
          <div
            data-testid="available-count"
          >
            1
          </div>
          <div
            data-testid="show-selector"
          >
            false
          </div>
          <div
            data-testid="should-redirect"
          >
            false
          </div>
          <button
            data-testid="switch-tenant"
          >
            Switch Tenant
          </button>
          <button
            data-testid="complete-selection"
          >
            Complete Selection
          </button>
        </div>
        <div
          data-testid="tenant-context-probe"
          style="display: none;"
        >
          <span
            data-testid="current-tenant"
          >
            Test Tenant
          </span>
          <span
            data-testid="available-count"
          >
            1
          </span>
          <span
            data-testid="tenant-loading"
          >
            0
          </span>
          <span
            data-testid="tenant-error"
          />
          <span
            data-testid="tenant-show-selector"
          >
            0
          </span>
        </div>
      </div>
    </div>
  </body>
</html>...
 ❯ Proxy.waitForWrapper node_modules/@testing-library/dom/dist/wait-for.js:163:27
 ❯ src/contexts/__tests__/TenantContext.test.tsx:244:13
    242|       render(<TestWrapper />)
    243|
    244|       await waitFor(() => {
       |             ^
    245|         expect(screen.getByTestId('current-tenant')).toHaveTextContent('Test Tenant')
    246|       }, { timeout: 8000 })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/24]⎯

 FAIL  src/contexts/__tests__/TenantContext.test.tsx > TenantContext - Enhanced Tests > Multiple Tenants > should show tenant selector for multiple tenants
 FAIL  src/contexts/__tests__/TenantContext.test.tsx > TenantContext - Enhanced Tests > Multiple Tenants > should show tenant selector for multiple tenants
TestingLibraryElementError: Found multiple elements by: [data-testid="available-count"]

Here are the matching elements:

Ignored nodes: comments, script, style
<div
  data-testid="available-count"
>
  2
</div>

Ignored nodes: comments, script, style
<span
  data-testid="available-count"
>
  2
</span>

(If this is intentional, then use the `*AllBy*` variant of the query (like `queryAllByText`, `getAllByText`, or `findAllByText`)).

Ignored nodes: comments, script, style
<body>
  <div>
    <div
      data-testid="auth-provider"
    >
      <div>
        <div
          data-testid="current-tenant"
        >
          No tenant
        </div>
        <div
          data-testid="available-count"
        >
          2
        </div>
        <div
          data-testid="show-selector"
        >
          true
        </div>
        <div
          data-testid="should-redirect"
        >
          false
        </div>
        <div
          data-testid="tenant-selector"
        >
          Selector shown
        </div>
        <button
          data-testid="switch-tenant"
        >
          Switch Tenant
        </button>
        <button
          data-testid="complete-selection"
        >
          Complete Selection
        </button>
      </div>
      <div
        data-testid="tenant-context-probe"
        style="display: none;"
      >
        <span
          data-testid="current-tenant"
        />
        <span
          data-testid="available-count"
        >
          2
        </span>
        <span
          data-testid="tenant-loading"
        >
          0
        </span>
        <span
          data-testid="tenant-error"
        />
        <span
          data-testid="tenant-show-selector"
        >
          1
        </span>
      </div>
    </div>
  </div>
</body>

Ignored nodes: comments, script, style
<html>
  <head>
    <meta
      content=""
      name="emotion-insertion-point"
    />
  </head>
  <body>
    <div>
      <div
        data-testid="auth-provider"
      >
        <div>
          <div
            data-testid="current-tenant"
          >
            No tenant
          </div>
          <div
            data-testid="available-count"
          >
            2
          </div>
          <div
            data-testid="show-selector"
          >
            true
          </div>
          <div
            data-testid="should-redirect"
          >
            false
          </div>
          <div
            data-testid="tenant-selector"
          >
            Selector shown
          </div>
          <button
            data-testid="switch-tenant"
          >
            Switch Tenant
          </button>
          <button
            data-testid="complete-selection"
          >
            Complete Selection
          </button>
        </div>
        <div
          data-testid="tenant-context-probe"
          style="display: none;"
        >
          <span
            data-testid="current-tenant"
          />
          <span
            data-testid="available-count"
          >
            2
          </span>
          <span
            data-testid="tenant-loading"
          >
            0
          </span>
          <span
            data-testid="tenant-error"
          />
          <span
            data-testid="tenant-show-selector"
          >
            1
          </span>
        </div>
      </div>
    </div>
  </body>
</html>...
 ❯ Proxy.waitForWrapper node_modules/@testing-library/dom/dist/wait-for.js:163:27
 ❯ src/contexts/__tests__/TenantContext.test.tsx:272:13
    270|       render(<TestWrapper mockUserTenants={mockMultipleTenants} />)
    271|
    272|       await waitFor(() => {
       |             ^
    273|         expect(screen.getByTestId('available-count')).toHaveTextContent('2')
    274|         expect(screen.getByTestId('show-selector')).toHaveTextContent('true')

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/24]⎯

 FAIL  src/contexts/__tests__/TenantContext.test.tsx > TenantContext - Enhanced Tests > Multiple Tenants > should complete tenant selection for multiple tenants
 FAIL  src/contexts/__tests__/TenantContext.test.tsx > TenantContext - Enhanced Tests > Multiple Tenants > should complete tenant selection for multiple tenants
TestingLibraryElementError: Found multiple elements by: [data-testid="available-count"]

Here are the matching elements:

Ignored nodes: comments, script, style
<div
  data-testid="available-count"
>
  2
</div>

Ignored nodes: comments, script, style
<span
  data-testid="available-count"
>
  2
</span>

(If this is intentional, then use the `*AllBy*` variant of the query (like `queryAllByText`, `getAllByText`, or `findAllByText`)).

Ignored nodes: comments, script, style
<body>
  <div>
    <div
      data-testid="auth-provider"
    >
      <div>
        <div
          data-testid="current-tenant"
        >
          No tenant
        </div>
        <div
          data-testid="available-count"
        >
          2
        </div>
        <div
          data-testid="show-selector"
        >
          true
        </div>
        <div
          data-testid="should-redirect"
        >
          false
        </div>
        <div
          data-testid="tenant-selector"
        >
          Selector shown
        </div>
        <button
          data-testid="switch-tenant"
        >
          Switch Tenant
        </button>
        <button
          data-testid="complete-selection"
        >
          Complete Selection
        </button>
      </div>
      <div
        data-testid="tenant-context-probe"
        style="display: none;"
      >
        <span
          data-testid="current-tenant"
        />
        <span
          data-testid="available-count"
        >
          2
        </span>
        <span
          data-testid="tenant-loading"
        >
          0
        </span>
        <span
          data-testid="tenant-error"
        />
        <span
          data-testid="tenant-show-selector"
        >
          1
        </span>
      </div>
    </div>
  </div>
</body>

Ignored nodes: comments, script, style
<html>
  <head>
    <meta
      content=""
      name="emotion-insertion-point"
    />
  </head>
  <body>
    <div>
      <div
        data-testid="auth-provider"
      >
        <div>
          <div
            data-testid="current-tenant"
          >
            No tenant
          </div>
          <div
            data-testid="available-count"
          >
            2
          </div>
          <div
            data-testid="show-selector"
          >
            true
          </div>
          <div
            data-testid="should-redirect"
          >
            false
          </div>
          <div
            data-testid="tenant-selector"
          >
            Selector shown
          </div>
          <button
            data-testid="switch-tenant"
          >
            Switch Tenant
          </button>
          <button
            data-testid="complete-selection"
          >
            Complete Selection
          </button>
        </div>
        <div
          data-testid="tenant-context-probe"
          style="display: none;"
        >
          <span
            data-testid="current-tenant"
          />
          <span
            data-testid="available-count"
          >
            2
          </span>
          <span
            data-testid="tenant-loading"
          >
            0
          </span>
          <span
            data-testid="tenant-error"
          />
          <span
            data-testid="tenant-show-selector"
          >
            1
          </span>
        </div>
      </div>
    </div>
  </body>
</html>...
 ❯ Proxy.waitForWrapper node_modules/@testing-library/dom/dist/wait-for.js:163:27
 ❯ src/contexts/__tests__/TenantContext.test.tsx:293:13
    291|       render(<TestWrapper mockUserTenants={mockMultipleTenants} />)
    292|
    293|       await waitFor(() => {
       |             ^
    294|         expect(screen.getByTestId('available-count')).toHaveTextContent('2')
    295|       })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[4/24]⎯

 FAIL  src/contexts/__tests__/TenantContext.test.tsx > TenantContext - Enhanced Tests > Tenant Switching > should switch between tenants
 FAIL  src/contexts/__tests__/TenantContext.test.tsx > TenantContext - Enhanced Tests > Tenant Switching > should switch between tenants
TestingLibraryElementError: Found multiple elements by: [data-testid="available-count"]

Here are the matching elements:

Ignored nodes: comments, script, style
<div
  data-testid="available-count"
>
  2
</div>

Ignored nodes: comments, script, style
<span
  data-testid="available-count"
>
  2
</span>

(If this is intentional, then use the `*AllBy*` variant of the query (like `queryAllByText`, `getAllByText`, or `findAllByText`)).

Ignored nodes: comments, script, style
<body>
  <div>
    <div
      data-testid="auth-provider"
    >
      <div>
        <div
          data-testid="current-tenant"
        >
          No tenant
        </div>
        <div
          data-testid="available-count"
        >
          2
        </div>
        <div
          data-testid="show-selector"
        >
          true
        </div>
        <div
          data-testid="should-redirect"
        >
          false
        </div>
        <div
          data-testid="tenant-selector"
        >
          Selector shown
        </div>
        <button
          data-testid="switch-tenant"
        >
          Switch Tenant
        </button>
        <button
          data-testid="complete-selection"
        >
          Complete Selection
        </button>
      </div>
      <div
        data-testid="tenant-context-probe"
        style="display: none;"
      >
        <span
          data-testid="current-tenant"
        />
        <span
          data-testid="available-count"
        >
          2
        </span>
        <span
          data-testid="tenant-loading"
        >
          0
        </span>
        <span
          data-testid="tenant-error"
        />
        <span
          data-testid="tenant-show-selector"
        >
          1
        </span>
      </div>
    </div>
  </div>
</body>

Ignored nodes: comments, script, style
<html>
  <head>
    <meta
      content=""
      name="emotion-insertion-point"
    />
  </head>
  <body>
    <div>
      <div
        data-testid="auth-provider"
      >
        <div>
          <div
            data-testid="current-tenant"
          >
            No tenant
          </div>
          <div
            data-testid="available-count"
          >
            2
          </div>
          <div
            data-testid="show-selector"
          >
            true
          </div>
          <div
            data-testid="should-redirect"
          >
            false
          </div>
          <div
            data-testid="tenant-selector"
          >
            Selector shown
          </div>
          <button
            data-testid="switch-tenant"
          >
            Switch Tenant
          </button>
          <button
            data-testid="complete-selection"
          >
            Complete Selection
          </button>
        </div>
        <div
          data-testid="tenant-context-probe"
          style="display: none;"
        >
          <span
            data-testid="current-tenant"
          />
          <span
            data-testid="available-count"
          >
            2
          </span>
          <span
            data-testid="tenant-loading"
          >
            0
          </span>
          <span
            data-testid="tenant-error"
          />
          <span
            data-testid="tenant-show-selector"
          >
            1
          </span>
        </div>
      </div>
    </div>
  </body>
</html>...
 ❯ Proxy.waitForWrapper node_modules/@testing-library/dom/dist/wait-for.js:163:27
 ❯ src/contexts/__tests__/TenantContext.test.tsx:328:13
    326|       render(<TestWrapper mockUserTenants={mockMultipleTenants} />)
    327|
    328|       await waitFor(() => {
       |             ^
    329|         expect(screen.getByTestId('available-count')).toHaveTextContent('2')
    330|       })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[5/24]⎯

 FAIL  src/contexts/__tests__/TenantContext.test.tsx > TenantContext - Enhanced Tests > Tenant Switching > should set redirect flag after successful switch
 FAIL  src/contexts/__tests__/TenantContext.test.tsx > TenantContext - Enhanced Tests > Tenant Switching > should set redirect flag after successful switch
TestingLibraryElementError: Found multiple elements by: [data-testid="available-count"]

Here are the matching elements:

Ignored nodes: comments, script, style
<div
  data-testid="available-count"
>
  2
</div>

Ignored nodes: comments, script, style
<span
  data-testid="available-count"
>
  2
</span>

(If this is intentional, then use the `*AllBy*` variant of the query (like `queryAllByText`, `getAllByText`, or `findAllByText`)).

Ignored nodes: comments, script, style
<body>
  <div>
    <div
      data-testid="auth-provider"
    >
      <div>
        <div
          data-testid="current-tenant"
        >
          No tenant
        </div>
        <div
          data-testid="available-count"
        >
          2
        </div>
        <div
          data-testid="show-selector"
        >
          true
        </div>
        <div
          data-testid="should-redirect"
        >
          false
        </div>
        <div
          data-testid="tenant-selector"
        >
          Selector shown
        </div>
        <button
          data-testid="switch-tenant"
        >
          Switch Tenant
        </button>
        <button
          data-testid="complete-selection"
        >
          Complete Selection
        </button>
      </div>
      <div
        data-testid="tenant-context-probe"
        style="display: none;"
      >
        <span
          data-testid="current-tenant"
        />
        <span
          data-testid="available-count"
        >
          2
        </span>
        <span
          data-testid="tenant-loading"
        >
          0
        </span>
        <span
          data-testid="tenant-error"
        />
        <span
          data-testid="tenant-show-selector"
        >
          1
        </span>
      </div>
    </div>
  </div>
</body>

Ignored nodes: comments, script, style
<html>
  <head>
    <meta
      content=""
      name="emotion-insertion-point"
    />
  </head>
  <body>
    <div>
      <div
        data-testid="auth-provider"
      >
        <div>
          <div
            data-testid="current-tenant"
          >
            No tenant
          </div>
          <div
            data-testid="available-count"
          >
            2
          </div>
          <div
            data-testid="show-selector"
          >
            true
          </div>
          <div
            data-testid="should-redirect"
          >
            false
          </div>
          <div
            data-testid="tenant-selector"
          >
            Selector shown
          </div>
          <button
            data-testid="switch-tenant"
          >
            Switch Tenant
          </button>
          <button
            data-testid="complete-selection"
          >
            Complete Selection
          </button>
        </div>
        <div
          data-testid="tenant-context-probe"
          style="display: none;"
        >
          <span
            data-testid="current-tenant"
          />
          <span
            data-testid="available-count"
          >
            2
          </span>
          <span
            data-testid="tenant-loading"
          >
            0
          </span>
          <span
            data-testid="tenant-error"
          />
          <span
            data-testid="tenant-show-selector"
          >
            1
          </span>
        </div>
      </div>
    </div>
  </body>
</html>...
 ❯ Proxy.waitForWrapper node_modules/@testing-library/dom/dist/wait-for.js:163:27
 ❯ src/contexts/__tests__/TenantContext.test.tsx:344:13
    342|       render(<TestWrapper mockUserTenants={mockMultipleTenants} />)
    343|
    344|       await waitFor(() => {
       |             ^
    345|         expect(screen.getByTestId('available-count')).toHaveTextContent('2')
    346|       })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[6/24]⎯

 FAIL  src/contexts/__tests__/TenantContext.test.tsx > TenantContext - Enhanced Tests > Error Handling > should handle switchTenant API failure
TestingLibraryElementError: Found multiple elements by: [data-testid="available-count"]

Here are the matching elements:

Ignored nodes: comments, script, style
<div
  data-testid="available-count"
>
  2
</div>

Ignored nodes: comments, script, style
<span
  data-testid="available-count"
>
  2
</span>

(If this is intentional, then use the `*AllBy*` variant of the query (like `queryAllByText`, `getAllByText`, or `findAllByText`)).

Ignored nodes: comments, script, style
<body>
  <div>
    <div
      data-testid="auth-provider"
    >
      <div>
        <div
          data-testid="current-tenant"
        >
          No tenant
        </div>
        <div
          data-testid="available-count"
        >
          2
        </div>
        <div
          data-testid="show-selector"
        >
          true
        </div>
        <div
          data-testid="should-redirect"
        >
          false
        </div>
        <div
          data-testid="tenant-selector"
        >
          Selector shown
        </div>
        <button
          data-testid="switch-tenant"
        >
          Switch Tenant
        </button>
        <button
          data-testid="complete-selection"
        >
          Complete Selection
        </button>
      </div>
      <div
        data-testid="tenant-context-probe"
        style="display: none;"
      >
        <span
          data-testid="current-tenant"
        />
        <span
          data-testid="available-count"
        >
          2
        </span>
        <span
          data-testid="tenant-loading"
        >
          0
        </span>
        <span
          data-testid="tenant-error"
        />
        <span
          data-testid="tenant-show-selector"
        >
          1
        </span>
      </div>
    </div>
  </div>
</body>

Ignored nodes: comments, script, style
<html>
  <head>
    <meta
      content=""
      name="emotion-insertion-point"
    />
  </head>
  <body>
    <div>
      <div
        data-testid="auth-provider"
      >
        <div>
          <div
            data-testid="current-tenant"
          >
            No tenant
          </div>
          <div
            data-testid="available-count"
          >
            2
          </div>
          <div
            data-testid="show-selector"
          >
            true
          </div>
          <div
            data-testid="should-redirect"
          >
            false
          </div>
          <div
            data-testid="tenant-selector"
          >
            Selector shown
          </div>
          <button
            data-testid="switch-tenant"
          >
            Switch Tenant
          </button>
          <button
            data-testid="complete-selection"
          >
            Complete Selection
          </button>
        </div>
        <div
          data-testid="tenant-context-probe"
          style="display: none;"
        >
          <span
            data-testid="current-tenant"
          />
          <span
            data-testid="available-count"
          >
            2
          </span>
          <span
            data-testid="tenant-loading"
          >
            0
          </span>
          <span
            data-testid="tenant-error"
          />
          <span
            data-testid="tenant-show-selector"
          >
            1
          </span>
        </div>
      </div>
    </div>
  </body>
</html>...
 ❯ Proxy.waitForWrapper node_modules/@testing-library/dom/dist/wait-for.js:163:27
 ❯ src/contexts/__tests__/TenantContext.test.tsx:385:13
    383|       render(<TestWrapper mockUserTenants={mockMultipleTenants} />)
    384|
    385|       await waitFor(() => {
       |             ^
    386|         expect(screen.getByTestId('available-count')).toHaveTextContent('2')
    387|       })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[7/24]⎯

 FAIL  src/contexts/__tests__/TenantContext.test.tsx > TenantContext - Enhanced Tests > Error Handling > should handle switchTenant API failure
TestingLibraryElementError: Found multiple elements by: [data-testid="available-count"]

Here are the matching elements:

Ignored nodes: comments, script, style
<div
  data-testid="available-count"
>
  2
</div>

Ignored nodes: comments, script, style
<span
  data-testid="available-count"
>
  2
</span>

(If this is intentional, then use the `*AllBy*` variant of the query (like `queryAllByText`, `getAllByText`, or `findAllByText`)).

Ignored nodes: comments, script, style
<body>
  <div>
    <div
      data-testid="auth-provider"
    >
      <div>
        <div
          data-testid="current-tenant"
        >
          No tenant
        </div>
        <div
          data-testid="available-count"
        >
          2
        </div>
        <div
          data-testid="show-selector"
        >
          true
        </div>
        <div
          data-testid="should-redirect"
        >
          false
        </div>
        <div
          data-testid="tenant-selector"
        >
          Selector shown
        </div>
        <button
          data-testid="switch-tenant"
        >
          Switch Tenant
        </button>
        <button
          data-testid="complete-selection"
        >
          Complete Selection
        </button>
      </div>
      <div
        data-testid="tenant-context-probe"
        style="display: none;"
      >
        <span
          data-testid="current-tenant"
        />
        <span
          data-testid="available-count"
        >
          2
        </span>
        <span
          data-testid="tenant-loading"
        >
          0
        </span>
        <span
          data-testid="tenant-error"
        />
        <span
          data-testid="tenant-show-selector"
        >
          1
        </span>
      </div>
    </div>
  </div>
</body>

Ignored nodes: comments, script, style
<html>
  <head>
    <meta
      content=""
      name="emotion-insertion-point"
    />
  </head>
  <body>
    <div>
      <div
        data-testid="auth-provider"
      >
        <div>
          <div
            data-testid="current-tenant"
          >
            No tenant
          </div>
          <div
            data-testid="available-count"
          >
            2
          </div>
          <div
            data-testid="show-selector"
          >
            true
          </div>
          <div
            data-testid="should-redirect"
          >
            false
          </div>
          <div
            data-testid="tenant-selector"
          >
            Selector shown
          </div>
          <button
            data-testid="switch-tenant"
          >
            Switch Tenant
          </button>
          <button
            data-testid="complete-selection"
          >
            Complete Selection
          </button>
        </div>
        <div
          data-testid="tenant-context-probe"
          style="display: none;"
        >
          <span
            data-testid="current-tenant"
          />
          <span
            data-testid="available-count"
          >
            2
          </span>
          <span
            data-testid="tenant-loading"
          >
            0
          </span>
          <span
            data-testid="tenant-error"
          />
          <span
            data-testid="tenant-show-selector"
          >
            1
          </span>
        </div>
      </div>
    </div>
  </body>
</html>...
 ❯ Proxy.waitForWrapper node_modules/@testing-library/dom/dist/wait-for.js:163:27
 ❯ src/contexts/__tests__/TenantContext.test.tsx:385:13
    383|       render(<TestWrapper mockUserTenants={mockMultipleTenants} />)
    384|
    385|       await waitFor(() => {
       |             ^
    386|         expect(screen.getByTestId('available-count')).toHaveTextContent('2')
    387|       })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[8/24]⎯

 FAIL  src/contexts/__tests__/TenantContext.test.tsx > TenantContext - Enhanced Tests > Loading States > should show loading state while fetching tenants
 FAIL  src/contexts/__tests__/TenantContext.test.tsx > TenantContext - Enhanced Tests > Loading States > should show loading state while fetching tenants
Error: expect(element).toHaveTextContent()

Expected element to have text content:
  Test Tenant
Received:


Ignored nodes: comments, script, style
<html>
  <head>
    <meta
      content=""
      name="emotion-insertion-point"
    />
  </head>
  <body>
    <div>
      <div
        data-testid="auth-provider"
      >
        <div
          data-testid="error"
        >
          Failed to select tenant
        </div>
        <div
          data-testid="tenant-context-probe"
          style="display: none;"
        >
          <span
            data-testid="current-tenant"
          />
          <span
            data-testid="available-count"
          >
            1
          </span>
          <span
            data-testid="tenant-loading"
          >
            0
          </span>
          <span
            data-testid="tenant-error"
          >
            Failed to select tenant
          </span>
          <span
            data-testid="tenant-show-selector"
          >
            0
          </span>
        </div>
      </div>
    </div>
  </body>
</html>...
 ❯ __vi_import_1__.waitFor.timeout src/contexts/__tests__/TenantContext.test.tsx:415:54
    413|       // Then should show tenant after loading
    414|       await waitFor(() => {
    415|         expect(screen.getByTestId('current-tenant')).toHaveTextContent('Test Tenant')
       |                                                      ^
    416|       }, { timeout: 8000 })
    417|     }, 15000)
 ❯ runWithExpensiveErrorDiagnosticsDisabled node_modules/@testing-library/dom/dist/config.js:47:12
 ❯ checkCallback node_modules/@testing-library/dom/dist/wait-for.js:124:77
 ❯ Timeout.checkRealTimersCallback node_modules/@testing-library/dom/dist/wait-for.js:118:16

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[9/24]⎯

 FAIL  src/contexts/__tests__/TenantContext.test.tsx > TenantContext - Enhanced Tests > JWT Token Integration > should handle page refresh with existing JWT tenant
 FAIL  src/contexts/__tests__/TenantContext.test.tsx > TenantContext - Enhanced Tests > JWT Token Integration > should handle page refresh with existing JWT tenant
TestingLibraryElementError: Found multiple elements by: [data-testid="available-count"]

Here are the matching elements:

Ignored nodes: comments, script, style
<div
  data-testid="available-count"
>
  2
</div>

Ignored nodes: comments, script, style
<span
  data-testid="available-count"
>
  2
</span>

(If this is intentional, then use the `*AllBy*` variant of the query (like `queryAllByText`, `getAllByText`, or `findAllByText`)).

Ignored nodes: comments, script, style
<body>
  <div>
    <div
      data-testid="auth-provider"
    >
      <div>
        <div
          data-testid="current-tenant"
        >
          No tenant
        </div>
        <div
          data-testid="available-count"
        >
          2
        </div>
        <div
          data-testid="show-selector"
        >
          true
        </div>
        <div
          data-testid="should-redirect"
        >
          false
        </div>
        <div
          data-testid="tenant-selector"
        >
          Selector shown
        </div>
        <button
          data-testid="switch-tenant"
        >
          Switch Tenant
        </button>
        <button
          data-testid="complete-selection"
        >
          Complete Selection
        </button>
      </div>
      <div
        data-testid="tenant-context-probe"
        style="display: none;"
      >
        <span
          data-testid="current-tenant"
        />
        <span
          data-testid="available-count"
        >
          2
        </span>
        <span
          data-testid="tenant-loading"
        >
          0
        </span>
        <span
          data-testid="tenant-error"
        />
        <span
          data-testid="tenant-show-selector"
        >
          1
        </span>
      </div>
    </div>
  </div>
</body>

Ignored nodes: comments, script, style
<html>
  <head>
    <meta
      content=""
      name="emotion-insertion-point"
    />
  </head>
  <body>
    <div>
      <div
        data-testid="auth-provider"
      >
        <div>
          <div
            data-testid="current-tenant"
          >
            No tenant
          </div>
          <div
            data-testid="available-count"
          >
            2
          </div>
          <div
            data-testid="show-selector"
          >
            true
          </div>
          <div
            data-testid="should-redirect"
          >
            false
          </div>
          <div
            data-testid="tenant-selector"
          >
            Selector shown
          </div>
          <button
            data-testid="switch-tenant"
          >
            Switch Tenant
          </button>
          <button
            data-testid="complete-selection"
          >
            Complete Selection
          </button>
        </div>
        <div
          data-testid="tenant-context-probe"
          style="display: none;"
        >
          <span
            data-testid="current-tenant"
          />
          <span
            data-testid="available-count"
          >
            2
          </span>
          <span
            data-testid="tenant-loading"
          >
            0
          </span>
          <span
            data-testid="tenant-error"
          />
          <span
            data-testid="tenant-show-selector"
          >
            1
          </span>
        </div>
      </div>
    </div>
  </body>
</html>...
 ❯ Proxy.waitForWrapper node_modules/@testing-library/dom/dist/wait-for.js:163:27
 ❯ src/contexts/__tests__/TenantContext.test.tsx:433:13
    431|       render(<TestWrapper mockUserTenants={mockMultipleTenants} />)
    432|
    433|       await waitFor(() => {
       |             ^
    434|         expect(screen.getByTestId('available-count')).toHaveTextContent('2')
    435|       })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[10/24]⎯

 FAIL  src/components/auth/__tests__/TwoPhaseAuthFlow.test.tsx > Two-Phase Authentication Flow > should complete Phase 2: Tenant selection
 FAIL  src/components/auth/__tests__/TwoPhaseAuthFlow.test.tsx > Two-Phase Authentication Flow > should complete Phase 2: Tenant selection
TestingLibraryElementError: Unable to find an element with the text: Tenant 1. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

Ignored nodes: comments, script, style
<body>
  <div>
    <main
      class="MuiContainer-root MuiContainer-maxWidthSm css-zzzaw2-MuiContainer-root"
      data-testid="tenant-selector-root"
    >
      <div
        class="MuiBox-root css-binzgt"
      >
        <div
          class="MuiPaper-root MuiPaper-elevation MuiPaper-rounded MuiPaper-elevation1 MuiCard-root css-1e2b4v4-MuiPaper-root-MuiCard-root"
          style="--Paper-shadow: 0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12);"
        >
          <div
            class="MuiCardContent-root css-21mhzp-MuiCardContent-root"
          >
            <h1
              class="MuiTypography-root MuiTypography-h4 MuiTypography-alignCenter MuiTypography-gutterBottom css-l8ztbh-MuiTypography-root"
              data-testid="tenant-selector-title"
              style="--Typography-textAlign: center;"
            >
              Select Organization
            </h1>
            <p
              class="MuiTypography-root MuiTypography-body1 MuiTypography-alignCenter css-12p21tt-MuiTypography-root"
              data-testid="tenant-selector-subtitle"
              style="--Typography-textAlign: center;"
            >
              You have access to multiple organizations. Please select one to continue.
            </p>
            <div
              class="MuiPaper-root MuiPaper-elevation MuiPaper-rounded MuiPaper-elevation0 MuiAlert-root MuiAlert-colorWarning MuiAlert-standardWarning MuiAlert-standard css-1u6i1g1-MuiPaper-root-MuiAlert-root"
              data-testid="tenant-selector-empty"
              role="alert"
              style="--Paper-shadow: none;"
            >
              <div
                class="MuiAlert-icon css-vab54s-MuiAlert-icon"
              >
                <svg
                  aria-hidden="true"
                  class="MuiSvgIcon-root MuiSvgIcon-fontSizeInherit css-1ckov0h-MuiSvgIcon-root"
                  data-testid="ReportProblemOutlinedIcon"
                  focusable="false"
                  viewBox="0 0 24 24"
                >
                  <path
                    d="M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z"
                  />
                </svg>
              </div>
              <div
                class="MuiAlert-message css-zioonp-MuiAlert-message"
              >
                You don't have access to any organizations. Please contact your administrator.
              </div>
            </div>
            <ul
              aria-label="Available organizations"
              class="MuiList-root MuiList-padding css-1q05d6r-MuiList-root"
              data-testid="tenant-list"
            />
            <button
              aria-label="Continue with selected organization"
              class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-sizeLarge MuiButton-containedSizeLarge MuiButton-colorPrimary MuiButton-fullWidth Mui-disabled MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-sizeLarge MuiButton-containedSizeLarge MuiButton-colorPrimary MuiButton-fullWidth css-13tpzue-MuiButtonBase-root-MuiButton-root"
              data-testid="tenant-continue-button"
              disabled=""
              tabindex="-1"
              type="button"
            >
              Select Organization
            </button>
          </div>
        </div>
      </div>
    </main>
    <div
      data-testid="tenant-context-probe"
      style="display: none;"
    >
      <span
        data-testid="current-tenant"
      />
      <span
        data-testid="available-count"
      >
        0
      </span>
      <span
        data-testid="tenant-loading"
      >
        0
      </span>
      <span
        data-testid="tenant-error"
      />
      <span
        data-testid="tenant-show-selector"
      >
        0
      </span>
    </div>
  </div>
</body>

Ignored nodes: comments, script, style
<html>
  <head>
    <meta
      content=""
      name="emotion-insertion-point"
    />
  </head>
  <body>
    <div>
      <main
        class="MuiContainer-root MuiContainer-maxWidthSm css-zzzaw2-MuiContainer-root"
        data-testid="tenant-selector-root"
      >
        <div
          class="MuiBox-root css-binzgt"
        >
          <div
            class="MuiPaper-root MuiPaper-elevation MuiPaper-rounded MuiPaper-elevation1 MuiCard-root css-1e2b4v4-MuiPaper-root-MuiCard-root"
            style="--Paper-shadow: 0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12);"
          >
            <div
              class="MuiCardContent-root css-21mhzp-MuiCardContent-root"
            >
              <h1
                class="MuiTypography-root MuiTypography-h4 MuiTypography-alignCenter MuiTypography-gutterBottom css-l8ztbh-MuiTypography-root"
                data-testid="tenant-selector-title"
                style="--Typography-textAlign: center;"
              >
                Select Organization
              </h1>
              <p
                class="MuiTypography-root MuiTypography-body1 MuiTypography-alignCenter css-12p21tt-MuiTypography-root"
                data-testid="tenant-selector-subtitle"
                style="--Typography-textAlign: center;"
              >
                You have access to multiple organizations. Please select one to continue.
              </p>
              <div
                class="MuiPaper-root MuiPaper-elevation MuiPaper-rounded MuiPaper-elevation0 MuiAlert-root MuiAlert-colorWarning MuiAlert-standardWarning MuiAlert-standard css-1u6i1g1-MuiPaper-root-MuiAlert-root"
                data-testid="tenant-selector-empty"
                role="alert"
                style="--Paper-shadow: none;"
              >
                <div
                  class="MuiAlert-icon css-vab54s-MuiAlert-icon"
                >
                  <svg
                    aria-hidden="true"
                    class="MuiSvgIcon-root MuiSvgIcon-fontSizeInherit css-1ckov0h-MuiSvgIcon-root"
                    data-testid="ReportProblemOutlinedIcon"
                    focusable="false"
                    viewBox="0 0 24 24"
                  >
                    <path
                      d="M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z"
                    />
                  </svg>
                </div>
                <div
                  class="MuiAlert-message css-zioonp-MuiAlert-message"
                >
                  You don't have access to any organizations. Please contact your administrator.
                </div>
              </div>
              <ul
                aria-label="Available organizations"
                class="MuiList-root MuiList-padding css-1q05d6r-MuiList-root"
                data-testid="tenant-list"
              />
              <button
                aria-label="Continue with selected organization"
                class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-sizeLarge MuiButton-containedSizeLarge MuiButton-colorPrimary MuiButton-fullWidth Mui-disabled MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-sizeLarge MuiButton-containedSizeLarge MuiButton-colorPrimary MuiButton-fullWidth css-13tpzue-MuiButtonBase-root-MuiButton-root"
                data-testid="tenant-continue-button"
                disabled=""
                tabindex="-1"
                type="button"
              >
                Select Organization
              </button>
            </div>
          </div>
        </div>
      </main>
      <div
        data-testid="tenant-context-probe"
        style="display: none;"
      >
        <span
          data-testid="current-tenant"
        />
        <span
          data-testid="available-count"
        >
          0
        </span>
        <span
          data-testid="tenant-loading"
        >
          0
        </span>
        <span
          data-testid="tenant-error"
        />
        <span
          data-testid="tenant-show-selector"
        >
          0
        </span>
      </div>
    </div>
  </body>
</html>...
 ❯ Proxy.waitForWrapper node_modules/@testing-library/dom/dist/wait-for.js:163:27
 ❯ src/components/auth/__tests__/TwoPhaseAuthFlow.test.tsx:227:11
    225|
    226|     // Wait for tenants to load and select one
    227|     await waitFor(() => {
       |           ^
    228|       expect(screen.getByText('Tenant 1')).toBeInTheDocument()
    229|     }, { timeout: 5000 })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[11/24]⎯

 FAIL  src/components/auth/__tests__/TwoPhaseAuthFlow.test.tsx > Two-Phase Authentication Flow > should handle single tenant auto-selection
 FAIL  src/components/auth/__tests__/TwoPhaseAuthFlow.test.tsx > Two-Phase Authentication Flow > should handle single tenant auto-selection
TestingLibraryElementError: Unable to find an element with the text: Continue. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

Ignored nodes: comments, script, style
<body>
  <div>
    <main
      class="MuiContainer-root MuiContainer-maxWidthSm css-zzzaw2-MuiContainer-root"
      data-testid="tenant-selector-root"
    >
      <div
        class="MuiBox-root css-binzgt"
      >
        <div
          class="MuiPaper-root MuiPaper-elevation MuiPaper-rounded MuiPaper-elevation1 MuiCard-root css-1e2b4v4-MuiPaper-root-MuiCard-root"
          style="--Paper-shadow: 0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12);"
        >
          <div
            class="MuiCardContent-root css-21mhzp-MuiCardContent-root"
          >
            <h1
              class="MuiTypography-root MuiTypography-h4 MuiTypography-alignCenter MuiTypography-gutterBottom css-l8ztbh-MuiTypography-root"
              data-testid="tenant-selector-title"
              style="--Typography-textAlign: center;"
            >
              Select Organization
            </h1>
            <p
              class="MuiTypography-root MuiTypography-body1 MuiTypography-alignCenter css-12p21tt-MuiTypography-root"
              data-testid="tenant-selector-subtitle"
              style="--Typography-textAlign: center;"
            >
              You have access to multiple organizations. Please select one to continue.
            </p>
            <div
              class="MuiPaper-root MuiPaper-elevation MuiPaper-rounded MuiPaper-elevation0 MuiAlert-root MuiAlert-colorWarning MuiAlert-standardWarning MuiAlert-standard css-1u6i1g1-MuiPaper-root-MuiAlert-root"
              data-testid="tenant-selector-empty"
              role="alert"
              style="--Paper-shadow: none;"
            >
              <div
                class="MuiAlert-icon css-vab54s-MuiAlert-icon"
              >
                <svg
                  aria-hidden="true"
                  class="MuiSvgIcon-root MuiSvgIcon-fontSizeInherit css-1ckov0h-MuiSvgIcon-root"
                  data-testid="ReportProblemOutlinedIcon"
                  focusable="false"
                  viewBox="0 0 24 24"
                >
                  <path
                    d="M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z"
                  />
                </svg>
              </div>
              <div
                class="MuiAlert-message css-zioonp-MuiAlert-message"
              >
                You don't have access to any organizations. Please contact your administrator.
              </div>
            </div>
            <ul
              aria-label="Available organizations"
              class="MuiList-root MuiList-padding css-1q05d6r-MuiList-root"
              data-testid="tenant-list"
            />
            <button
              aria-label="Continue with selected organization"
              class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-sizeLarge MuiButton-containedSizeLarge MuiButton-colorPrimary MuiButton-fullWidth Mui-disabled MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-sizeLarge MuiButton-containedSizeLarge MuiButton-colorPrimary MuiButton-fullWidth css-13tpzue-MuiButtonBase-root-MuiButton-root"
              data-testid="tenant-continue-button"
              disabled=""
              tabindex="-1"
              type="button"
            >
              Select Organization
            </button>
          </div>
        </div>
      </div>
    </main>
    <div
      data-testid="tenant-context-probe"
      style="display: none;"
    >
      <span
        data-testid="current-tenant"
      />
      <span
        data-testid="available-count"
      >
        0
      </span>
      <span
        data-testid="tenant-loading"
      >
        0
      </span>
      <span
        data-testid="tenant-error"
      />
      <span
        data-testid="tenant-show-selector"
      >
        0
      </span>
    </div>
  </div>
</body>

Ignored nodes: comments, script, style
<html>
  <head>
    <meta
      content=""
      name="emotion-insertion-point"
    />
  </head>
  <body>
    <div>
      <main
        class="MuiContainer-root MuiContainer-maxWidthSm css-zzzaw2-MuiContainer-root"
        data-testid="tenant-selector-root"
      >
        <div
          class="MuiBox-root css-binzgt"
        >
          <div
            class="MuiPaper-root MuiPaper-elevation MuiPaper-rounded MuiPaper-elevation1 MuiCard-root css-1e2b4v4-MuiPaper-root-MuiCard-root"
            style="--Paper-shadow: 0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12);"
          >
            <div
              class="MuiCardContent-root css-21mhzp-MuiCardContent-root"
            >
              <h1
                class="MuiTypography-root MuiTypography-h4 MuiTypography-alignCenter MuiTypography-gutterBottom css-l8ztbh-MuiTypography-root"
                data-testid="tenant-selector-title"
                style="--Typography-textAlign: center;"
              >
                Select Organization
              </h1>
              <p
                class="MuiTypography-root MuiTypography-body1 MuiTypography-alignCenter css-12p21tt-MuiTypography-root"
                data-testid="tenant-selector-subtitle"
                style="--Typography-textAlign: center;"
              >
                You have access to multiple organizations. Please select one to continue.
              </p>
              <div
                class="MuiPaper-root MuiPaper-elevation MuiPaper-rounded MuiPaper-elevation0 MuiAlert-root MuiAlert-colorWarning MuiAlert-standardWarning MuiAlert-standard css-1u6i1g1-MuiPaper-root-MuiAlert-root"
                data-testid="tenant-selector-empty"
                role="alert"
                style="--Paper-shadow: none;"
              >
                <div
                  class="MuiAlert-icon css-vab54s-MuiAlert-icon"
                >
                  <svg
                    aria-hidden="true"
                    class="MuiSvgIcon-root MuiSvgIcon-fontSizeInherit css-1ckov0h-MuiSvgIcon-root"
                    data-testid="ReportProblemOutlinedIcon"
                    focusable="false"
                    viewBox="0 0 24 24"
                  >
                    <path
                      d="M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z"
                    />
                  </svg>
                </div>
                <div
                  class="MuiAlert-message css-zioonp-MuiAlert-message"
                >
                  You don't have access to any organizations. Please contact your administrator.
                </div>
              </div>
              <ul
                aria-label="Available organizations"
                class="MuiList-root MuiList-padding css-1q05d6r-MuiList-root"
                data-testid="tenant-list"
              />
              <button
                aria-label="Continue with selected organization"
                class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-sizeLarge MuiButton-containedSizeLarge MuiButton-colorPrimary MuiButton-fullWidth Mui-disabled MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-sizeLarge MuiButton-containedSizeLarge MuiButton-colorPrimary MuiButton-fullWidth css-13tpzue-MuiButtonBase-root-MuiButton-root"
                data-testid="tenant-continue-button"
                disabled=""
                tabindex="-1"
                type="button"
              >
                Select Organization
              </button>
            </div>
          </div>
        </div>
      </main>
      <div
        data-testid="tenant-context-probe"
        style="display: none;"
      >
        <span
          data-testid="current-tenant"
        />
        <span
          data-testid="available-count"
        >
          0
        </span>
        <span
          data-testid="tenant-loading"
        >
          0
        </span>
        <span
          data-testid="tenant-error"
        />
        <span
          data-testid="tenant-show-selector"
        >
          0
        </span>
      </div>
    </div>
  </body>
</html>...
 ❯ Proxy.waitForWrapper node_modules/@testing-library/dom/dist/wait-for.js:163:27
 ❯ src/components/auth/__tests__/TwoPhaseAuthFlow.test.tsx:305:11
    303|
    304|     // Should auto-select and show continue
    305|     await waitFor(() => {
       |           ^
    306|       expect(screen.getByText('Continue')).toBeInTheDocument()
    307|     }, { timeout: 5000 })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[12/24]⎯

 FAIL  src/components/auth/__tests__/TwoPhaseAuthFlow.test.tsx > Two-Phase Authentication Flow > should handle tenant loading errors
 FAIL  src/components/auth/__tests__/TwoPhaseAuthFlow.test.tsx > Two-Phase Authentication Flow > should handle tenant loading errors
TestingLibraryElementError: Unable to find an element with the text: /failed to load tenants/i. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

Ignored nodes: comments, script, style
<body>
  <div>
    <main
      class="MuiContainer-root MuiContainer-maxWidthSm css-zzzaw2-MuiContainer-root"
      data-testid="tenant-selector-root"
    >
      <div
        class="MuiBox-root css-binzgt"
      >
        <div
          class="MuiPaper-root MuiPaper-elevation MuiPaper-rounded MuiPaper-elevation1 MuiCard-root css-1e2b4v4-MuiPaper-root-MuiCard-root"
          style="--Paper-shadow: 0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12);"
        >
          <div
            class="MuiCardContent-root css-21mhzp-MuiCardContent-root"
          >
            <h1
              class="MuiTypography-root MuiTypography-h4 MuiTypography-alignCenter MuiTypography-gutterBottom css-l8ztbh-MuiTypography-root"
              data-testid="tenant-selector-title"
              style="--Typography-textAlign: center;"
            >
              Select Organization
            </h1>
            <p
              class="MuiTypography-root MuiTypography-body1 MuiTypography-alignCenter css-12p21tt-MuiTypography-root"
              data-testid="tenant-selector-subtitle"
              style="--Typography-textAlign: center;"
            >
              You have access to multiple organizations. Please select one to continue.
            </p>
            <div
              class="MuiPaper-root MuiPaper-elevation MuiPaper-rounded MuiPaper-elevation0 MuiAlert-root MuiAlert-colorWarning MuiAlert-standardWarning MuiAlert-standard css-1u6i1g1-MuiPaper-root-MuiAlert-root"
              data-testid="tenant-selector-empty"
              role="alert"
              style="--Paper-shadow: none;"
            >
              <div
                class="MuiAlert-icon css-vab54s-MuiAlert-icon"
              >
                <svg
                  aria-hidden="true"
                  class="MuiSvgIcon-root MuiSvgIcon-fontSizeInherit css-1ckov0h-MuiSvgIcon-root"
                  data-testid="ReportProblemOutlinedIcon"
                  focusable="false"
                  viewBox="0 0 24 24"
                >
                  <path
                    d="M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z"
                  />
                </svg>
              </div>
              <div
                class="MuiAlert-message css-zioonp-MuiAlert-message"
              >
                You don't have access to any organizations. Please contact your administrator.
              </div>
            </div>
            <ul
              aria-label="Available organizations"
              class="MuiList-root MuiList-padding css-1q05d6r-MuiList-root"
              data-testid="tenant-list"
            />
            <button
              aria-label="Continue with selected organization"
              class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-sizeLarge MuiButton-containedSizeLarge MuiButton-colorPrimary MuiButton-fullWidth Mui-disabled MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-sizeLarge MuiButton-containedSizeLarge MuiButton-colorPrimary MuiButton-fullWidth css-13tpzue-MuiButtonBase-root-MuiButton-root"
              data-testid="tenant-continue-button"
              disabled=""
              tabindex="-1"
              type="button"
            >
              Select Organization
            </button>
          </div>
        </div>
      </div>
    </main>
    <div
      data-testid="tenant-context-probe"
      style="display: none;"
    >
      <span
        data-testid="current-tenant"
      />
      <span
        data-testid="available-count"
      >
        0
      </span>
      <span
        data-testid="tenant-loading"
      >
        0
      </span>
      <span
        data-testid="tenant-error"
      />
      <span
        data-testid="tenant-show-selector"
      >
        0
      </span>
    </div>
  </div>
</body>

Ignored nodes: comments, script, style
<html>
  <head>
    <meta
      content=""
      name="emotion-insertion-point"
    />
  </head>
  <body>
    <div>
      <main
        class="MuiContainer-root MuiContainer-maxWidthSm css-zzzaw2-MuiContainer-root"
        data-testid="tenant-selector-root"
      >
        <div
          class="MuiBox-root css-binzgt"
        >
          <div
            class="MuiPaper-root MuiPaper-elevation MuiPaper-rounded MuiPaper-elevation1 MuiCard-root css-1e2b4v4-MuiPaper-root-MuiCard-root"
            style="--Paper-shadow: 0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12);"
          >
            <div
              class="MuiCardContent-root css-21mhzp-MuiCardContent-root"
            >
              <h1
                class="MuiTypography-root MuiTypography-h4 MuiTypography-alignCenter MuiTypography-gutterBottom css-l8ztbh-MuiTypography-root"
                data-testid="tenant-selector-title"
                style="--Typography-textAlign: center;"
              >
                Select Organization
              </h1>
              <p
                class="MuiTypography-root MuiTypography-body1 MuiTypography-alignCenter css-12p21tt-MuiTypography-root"
                data-testid="tenant-selector-subtitle"
                style="--Typography-textAlign: center;"
              >
                You have access to multiple organizations. Please select one to continue.
              </p>
              <div
                class="MuiPaper-root MuiPaper-elevation MuiPaper-rounded MuiPaper-elevation0 MuiAlert-root MuiAlert-colorWarning MuiAlert-standardWarning MuiAlert-standard css-1u6i1g1-MuiPaper-root-MuiAlert-root"
                data-testid="tenant-selector-empty"
                role="alert"
                style="--Paper-shadow: none;"
              >
                <div
                  class="MuiAlert-icon css-vab54s-MuiAlert-icon"
                >
                  <svg
                    aria-hidden="true"
                    class="MuiSvgIcon-root MuiSvgIcon-fontSizeInherit css-1ckov0h-MuiSvgIcon-root"
                    data-testid="ReportProblemOutlinedIcon"
                    focusable="false"
                    viewBox="0 0 24 24"
                  >
                    <path
                      d="M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z"
                    />
                  </svg>
                </div>
                <div
                  class="MuiAlert-message css-zioonp-MuiAlert-message"
                >
                  You don't have access to any organizations. Please contact your administrator.
                </div>
              </div>
              <ul
                aria-label="Available organizations"
                class="MuiList-root MuiList-padding css-1q05d6r-MuiList-root"
                data-testid="tenant-list"
              />
              <button
                aria-label="Continue with selected organization"
                class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-sizeLarge MuiButton-containedSizeLarge MuiButton-colorPrimary MuiButton-fullWidth Mui-disabled MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-sizeLarge MuiButton-containedSizeLarge MuiButton-colorPrimary MuiButton-fullWidth css-13tpzue-MuiButtonBase-root-MuiButton-root"
                data-testid="tenant-continue-button"
                disabled=""
                tabindex="-1"
                type="button"
              >
                Select Organization
              </button>
            </div>
          </div>
        </div>
      </main>
      <div
        data-testid="tenant-context-probe"
        style="display: none;"
      >
        <span
          data-testid="current-tenant"
        />
        <span
          data-testid="available-count"
        >
          0
        </span>
        <span
          data-testid="tenant-loading"
        >
          0
        </span>
        <span
          data-testid="tenant-error"
        />
        <span
          data-testid="tenant-show-selector"
        >
          0
        </span>
      </div>
    </div>
  </body>
</html>...
 ❯ Proxy.waitForWrapper node_modules/@testing-library/dom/dist/wait-for.js:163:27
 ❯ src/components/auth/__tests__/TwoPhaseAuthFlow.test.tsx:351:11
    349|     )
    350|
    351|     await waitFor(() => {
       |           ^
    352|       expect(screen.getByText(/failed to load tenants/i)).toBeInTheDocument()
    353|     }, { timeout: 5000 })

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[13/24]⎯

 FAIL  src/components/__tests__/roles/RoleList.test.tsx > RoleList > renders role data
Error: expect(element).not.toBeInTheDocument()

expected document not to contain element, found <p
  class="MuiTypography-root MuiTypography-body1 css-bn546x-MuiTypography-root"
>
  Loading roles for
  Test Tenant
  ...
</p> instead

Ignored nodes: comments, script, style
<html>
  <head>
    <meta
      content=""
      name="emotion-insertion-point"
    />
  </head>
  <body>
    <div>
      <div
        class="MuiBox-root css-qd5mg9"
      >
        <span
          class="MuiCircularProgress-root MuiCircularProgress-indeterminate MuiCircularProgress-colorPrimary css-1wxecgq-MuiCircularProgress-root"
          role="progressbar"
          style="width: 40px; height: 40px;"
        >
          <svg
            class="MuiCircularProgress-svg css-54pwck-MuiCircularProgress-svg"
            viewBox="22 22 44 44"
          >
            <circle
              class="MuiCircularProgress-circle MuiCircularProgress-circleIndeterminate css-19t5dcl-MuiCircularProgress-circle"
              cx="44"
              cy="44"
              fill="none"
              r="20.2"
              stroke-width="3.6"
            />
          </svg>
        </span>
        <p
          class="MuiTypography-root MuiTypography-body1 css-bn546x-MuiTypography-root"
        >
          Loading roles for
          Test Tenant
          ...
        </p>
      </div>
    </div>
  </body>
</html>...
 ❯ src/components/__tests__/roles/RoleList.test.tsx:135:56
    133|
    134|     await waitFor(() => {
    135|       expect(screen.queryByText(/Loading roles/i)).not.toBeInTheDocument();
       |                                                        ^
    136|     });
    137|
 ❯ runWithExpensiveErrorDiagnosticsDisabled node_modules/@testing-library/dom/dist/config.js:47:12
 ❯ checkCallback node_modules/@testing-library/dom/dist/wait-for.js:124:77
 ❯ MutationObserver.checkRealTimersCallback node_modules/@testing-library/dom/dist/wait-for.js:118:16
 ❯ MutationObserver.invokeTheCallbackFunction node_modules/jsdom/lib/jsdom/living/generated/MutationCallback.js:19:26
 ❯ notifyMutationObservers node_modules/jsdom/lib/jsdom/living/helpers/mutation-observers.js:160:22
 ❯ node_modules/jsdom/lib/jsdom/living/helpers/mutation-observers.js:133:5

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[14/24]⎯

 FAIL  src/components/__tests__/roles/RoleList.test.tsx > RoleList > renders role data
Error: expect(element).not.toBeInTheDocument()

expected document not to contain element, found <p
  class="MuiTypography-root MuiTypography-body1 css-bn546x-MuiTypography-root"
>
  Loading roles for
  Test Tenant
  ...
</p> instead

Ignored nodes: comments, script, style
<html>
  <head>
    <meta
      content=""
      name="emotion-insertion-point"
    />
  </head>
  <body>
    <div>
      <div
        class="MuiBox-root css-qd5mg9"
      >
        <span
          class="MuiCircularProgress-root MuiCircularProgress-indeterminate MuiCircularProgress-colorPrimary css-1wxecgq-MuiCircularProgress-root"
          role="progressbar"
          style="width: 40px; height: 40px;"
        >
          <svg
            class="MuiCircularProgress-svg css-54pwck-MuiCircularProgress-svg"
            viewBox="22 22 44 44"
          >
            <circle
              class="MuiCircularProgress-circle MuiCircularProgress-circleIndeterminate css-19t5dcl-MuiCircularProgress-circle"
              cx="44"
              cy="44"
              fill="none"
              r="20.2"
              stroke-width="3.6"
            />
          </svg>
        </span>
        <p
          class="MuiTypography-root MuiTypography-body1 css-bn546x-MuiTypography-root"
        >
          Loading roles for
          Test Tenant
          ...
        </p>
      </div>
    </div>
  </body>
</html>...
 ❯ src/components/__tests__/roles/RoleList.test.tsx:135:56
    133|
    134|     await waitFor(() => {
    135|       expect(screen.queryByText(/Loading roles/i)).not.toBeInTheDocument();
       |                                                        ^
    136|     });
    137|
 ❯ runWithExpensiveErrorDiagnosticsDisabled node_modules/@testing-library/dom/dist/config.js:47:12
 ❯ checkCallback node_modules/@testing-library/dom/dist/wait-for.js:124:77
 ❯ Timeout.checkRealTimersCallback node_modules/@testing-library/dom/dist/wait-for.js:118:16

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[15/24]⎯

 Test Files  3 failed | 9 passed (12)
      Tests  12 failed | 82 passed (94)
   Start at  10:47:43
   Duration  102.69s

