// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WorkflowService.Persistence;

#nullable disable

namespace WorkflowService.Migrations
{
    [DbContext(typeof(WorkflowDbContext))]
    [Migration("20250901135826_AddWorkflowTaskNodeType")]
    partial class AddWorkflowTaskNodeType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WorkflowService.Domain.Models.OutboxMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("EventData")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("boolean");

                    b.Property<string>("LastError")
                        .HasColumnType("text");

                    b.Property<DateTime?>("NextRetryAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("NextRetryAt");

                    b.HasIndex("EventType", "IsProcessed");

                    b.HasIndex("IsProcessed", "CreatedAt");

                    b.ToTable("OutboxMessages");
                });

            modelBuilder.Entity("WorkflowService.Domain.Models.WorkflowDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ArchivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<string>("JSONDefinition")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("ParentDefinitionId")
                        .HasColumnType("integer");

                    b.Property<string>("PublishNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("PublishedByUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<string>("VersionNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "IsPublished");

                    b.HasIndex("TenantId", "Name", "Version")
                        .IsUnique();

                    b.ToTable("WorkflowDefinitions", t =>
                        {
                            t.HasCheckConstraint("CK_WorkflowDefinition_TenantId", "\"TenantId\" = current_setting('app.tenant_id')::int");
                        });
                });

            modelBuilder.Entity("WorkflowService.Domain.Models.WorkflowEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("OccurredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("WorkflowInstanceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("WorkflowInstanceId", "OccurredAt");

                    b.HasIndex("TenantId", "Type", "OccurredAt");

                    b.ToTable("WorkflowEvents", t =>
                        {
                            t.HasCheckConstraint("CK_WorkflowEvent_TenantId", "\"TenantId\" = current_setting('app.tenant_id')::int");
                        });
                });

            modelBuilder.Entity("WorkflowService.Domain.Models.WorkflowInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CurrentNodeIds")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int>("DefinitionVersion")
                        .HasColumnType("integer");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("StartedByUserId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("WorkflowDefinitionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowDefinitionId");

                    b.HasIndex("TenantId", "StartedAt");

                    b.HasIndex("TenantId", "Status");

                    b.HasIndex("TenantId", "WorkflowDefinitionId");

                    b.ToTable("WorkflowInstances", t =>
                        {
                            t.HasCheckConstraint("CK_WorkflowInstance_TenantId", "\"TenantId\" = current_setting('app.tenant_id')::int");
                        });
                });

            modelBuilder.Entity("WorkflowService.Domain.Models.WorkflowTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AssignedToRole")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("AssignedToUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ClaimedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CompletionData")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("NodeId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NodeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("WorkflowInstanceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToRole", "Status");

                    b.HasIndex("TenantId", "AssignedToUserId");

                    b.HasIndex("TenantId", "DueDate");

                    b.HasIndex("TenantId", "Status");

                    b.HasIndex("WorkflowInstanceId", "Status");

                    b.ToTable("WorkflowTasks", t =>
                        {
                            t.HasCheckConstraint("CK_WorkflowTask_TenantId", "\"TenantId\" = current_setting('app.tenant_id')::int");
                        });
                });

            modelBuilder.Entity("WorkflowService.Domain.Models.WorkflowEvent", b =>
                {
                    b.HasOne("WorkflowService.Domain.Models.WorkflowInstance", "WorkflowInstance")
                        .WithMany("Events")
                        .HasForeignKey("WorkflowInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkflowInstance");
                });

            modelBuilder.Entity("WorkflowService.Domain.Models.WorkflowInstance", b =>
                {
                    b.HasOne("WorkflowService.Domain.Models.WorkflowDefinition", "WorkflowDefinition")
                        .WithMany("Instances")
                        .HasForeignKey("WorkflowDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WorkflowDefinition");
                });

            modelBuilder.Entity("WorkflowService.Domain.Models.WorkflowTask", b =>
                {
                    b.HasOne("WorkflowService.Domain.Models.WorkflowInstance", "WorkflowInstance")
                        .WithMany("Tasks")
                        .HasForeignKey("WorkflowInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkflowInstance");
                });

            modelBuilder.Entity("WorkflowService.Domain.Models.WorkflowDefinition", b =>
                {
                    b.Navigation("Instances");
                });

            modelBuilder.Entity("WorkflowService.Domain.Models.WorkflowInstance", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
